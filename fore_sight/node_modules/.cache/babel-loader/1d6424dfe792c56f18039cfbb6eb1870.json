{"ast":null,"code":"/*istanbul ignore start*/\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n/*istanbul ignore end*/\n// Iterator that traverses in the range of [min, max], stepping\n// by distance from a given start position. I.e. for [0, 4], with\n// start of 2, this will iterate 2, 3, 1, 4, 0.\n\nfunction\n/*istanbul ignore start*/\n_default\n/*istanbul ignore end*/\n(start, minLine, maxLine) {\n  var wantForward = true,\n      backwardExhausted = false,\n      forwardExhausted = false,\n      localOffset = 1;\n  return function iterator() {\n    if (wantForward && !forwardExhausted) {\n      if (backwardExhausted) {\n        localOffset++;\n      } else {\n        wantForward = false;\n      } // Check if trying to fit beyond text length, and if not, check it fits\n      // after offset location (or desired location on first iteration)\n\n\n      if (start + localOffset <= maxLine) {\n        return localOffset;\n      }\n\n      forwardExhausted = true;\n    }\n\n    if (!backwardExhausted) {\n      if (!forwardExhausted) {\n        wantForward = true;\n      } // Check if trying to fit before text beginning, and if not, check it fits\n      // before offset location\n\n\n      if (minLine <= start - localOffset) {\n        return -localOffset++;\n      }\n\n      backwardExhausted = true;\n      return iterator();\n    } // We tried to fit hunk before text beginning and beyond text length, then\n    // hunk can't fit on the text. Return undefined\n\n  };\n}","map":{"version":3,"mappings":";;;;;;;;AAAA;AACA;AACA;;AACe;AAAA;AAAAA;AAAA;AAAA,CAASC,KAAT,EAAgBC,OAAhB,EAAyBC,OAAzB,EAAkC;AAC/C,MAAIC,WAAW,GAAG,IAAlB;AAAA,MACIC,iBAAiB,GAAG,KADxB;AAAA,MAEIC,gBAAgB,GAAG,KAFvB;AAAA,MAGIC,WAAW,GAAG,CAHlB;AAKA,SAAO,SAASC,QAAT,GAAoB;AACzB,QAAIJ,WAAW,IAAI,CAACE,gBAApB,EAAsC;AACpC,UAAID,iBAAJ,EAAuB;AACrBE,mBAAW;AADb,aAEO;AACLH,mBAAW,GAAG,KAAdA;AAJkC,QAOpC;AACA;;;AACA,UAAIH,KAAK,GAAGM,WAARN,IAAuBE,OAA3B,EAAoC;AAClC,eAAOI,WAAP;AACD;;AAEDD,sBAAgB,GAAG,IAAnBA;AACD;;AAED,QAAI,CAACD,iBAAL,EAAwB;AACtB,UAAI,CAACC,gBAAL,EAAuB;AACrBF,mBAAW,GAAG,IAAdA;AAFoB,QAKtB;AACA;;;AACA,UAAIF,OAAO,IAAID,KAAK,GAAGM,WAAvB,EAAoC;AAClC,eAAO,CAACA,WAAW,EAAnB;AACD;;AAEDF,uBAAiB,GAAG,IAApBA;AACA,aAAOG,QAAQ,EAAf;AA7BuB,MAgCzB;AACA;;AAjCF;AAmCD","names":["_default","start","minLine","maxLine","wantForward","backwardExhausted","forwardExhausted","localOffset","iterator"],"sources":["C:\\Users\\91805\\node_modules\\diff\\src\\util\\distance-iterator.js"],"sourcesContent":["// Iterator that traverses in the range of [min, max], stepping\n// by distance from a given start position. I.e. for [0, 4], with\n// start of 2, this will iterate 2, 3, 1, 4, 0.\nexport default function(start, minLine, maxLine) {\n  let wantForward = true,\n      backwardExhausted = false,\n      forwardExhausted = false,\n      localOffset = 1;\n\n  return function iterator() {\n    if (wantForward && !forwardExhausted) {\n      if (backwardExhausted) {\n        localOffset++;\n      } else {\n        wantForward = false;\n      }\n\n      // Check if trying to fit beyond text length, and if not, check it fits\n      // after offset location (or desired location on first iteration)\n      if (start + localOffset <= maxLine) {\n        return localOffset;\n      }\n\n      forwardExhausted = true;\n    }\n\n    if (!backwardExhausted) {\n      if (!forwardExhausted) {\n        wantForward = true;\n      }\n\n      // Check if trying to fit before text beginning, and if not, check it fits\n      // before offset location\n      if (minLine <= start - localOffset) {\n        return -localOffset++;\n      }\n\n      backwardExhausted = true;\n      return iterator();\n    }\n\n    // We tried to fit hunk before text beginning and beyond text length, then\n    // hunk can't fit on the text. Return undefined\n  };\n}\n"]},"metadata":{},"sourceType":"script"}
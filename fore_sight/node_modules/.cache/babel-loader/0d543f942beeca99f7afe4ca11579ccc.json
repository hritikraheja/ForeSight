{"ast":null,"code":"'use strict';\n/**\n * @module Progress\n */\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\n\nvar constants = require('../runner').constants;\n\nvar EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;\nvar EVENT_TEST_END = constants.EVENT_TEST_END;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\n\nvar inherits = require('../utils').inherits;\n\nvar color = Base.color;\nvar cursor = Base.cursor;\n/**\n * Expose `Progress`.\n */\n\nexports = module.exports = Progress;\n/**\n * General progress bar color.\n */\n\nBase.colors.progress = 90;\n/**\n * Constructs a new `Progress` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\n\nfunction Progress(runner, options) {\n  Base.call(this, runner, options);\n  var self = this;\n  var width = Base.window.width * 0.5 | 0;\n  var total = runner.total;\n  var complete = 0;\n  var lastN = -1; // default chars\n\n  options = options || {};\n  var reporterOptions = options.reporterOptions || {};\n  options.open = reporterOptions.open || '[';\n  options.complete = reporterOptions.complete || '▬';\n  options.incomplete = reporterOptions.incomplete || Base.symbols.dot;\n  options.close = reporterOptions.close || ']';\n  options.verbose = reporterOptions.verbose || false; // tests started\n\n  runner.on(EVENT_RUN_BEGIN, function () {\n    process.stdout.write('\\n');\n    cursor.hide();\n  }); // tests complete\n\n  runner.on(EVENT_TEST_END, function () {\n    complete++;\n    var percent = complete / total;\n    var n = width * percent | 0;\n    var i = width - n;\n\n    if (n === lastN && !options.verbose) {\n      // Don't re-render the line if it hasn't changed\n      return;\n    }\n\n    lastN = n;\n    cursor.CR();\n    process.stdout.write('\\u001b[J');\n    process.stdout.write(color('progress', '  ' + options.open));\n    process.stdout.write(Array(n).join(options.complete));\n    process.stdout.write(Array(i).join(options.incomplete));\n    process.stdout.write(color('progress', options.close));\n\n    if (options.verbose) {\n      process.stdout.write(color('progress', ' ' + complete + ' of ' + total));\n    }\n  }); // tests are complete, output some stats\n  // and the failures if any\n\n  runner.once(EVENT_RUN_END, function () {\n    cursor.show();\n    process.stdout.write('\\n');\n    self.epilogue();\n  });\n}\n/**\n * Inherit from `Base.prototype`.\n */\n\n\ninherits(Progress, Base);\nProgress.description = 'a progress bar';","map":{"version":3,"sources":["C:/Users/91805/node_modules/mocha/lib/reporters/progress.js"],"names":["Base","require","constants","EVENT_RUN_BEGIN","EVENT_TEST_END","EVENT_RUN_END","inherits","color","cursor","exports","module","Progress","colors","progress","runner","options","call","self","width","window","total","complete","lastN","reporterOptions","open","incomplete","symbols","dot","close","verbose","on","process","stdout","write","hide","percent","n","i","CR","Array","join","once","show","epilogue","description"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * @module Progress\n */\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar constants = require('../runner').constants;\nvar EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;\nvar EVENT_TEST_END = constants.EVENT_TEST_END;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\nvar inherits = require('../utils').inherits;\nvar color = Base.color;\nvar cursor = Base.cursor;\n\n/**\n * Expose `Progress`.\n */\n\nexports = module.exports = Progress;\n\n/**\n * General progress bar color.\n */\n\nBase.colors.progress = 90;\n\n/**\n * Constructs a new `Progress` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction Progress(runner, options) {\n  Base.call(this, runner, options);\n\n  var self = this;\n  var width = (Base.window.width * 0.5) | 0;\n  var total = runner.total;\n  var complete = 0;\n  var lastN = -1;\n\n  // default chars\n  options = options || {};\n  var reporterOptions = options.reporterOptions || {};\n\n  options.open = reporterOptions.open || '[';\n  options.complete = reporterOptions.complete || '▬';\n  options.incomplete = reporterOptions.incomplete || Base.symbols.dot;\n  options.close = reporterOptions.close || ']';\n  options.verbose = reporterOptions.verbose || false;\n\n  // tests started\n  runner.on(EVENT_RUN_BEGIN, function () {\n    process.stdout.write('\\n');\n    cursor.hide();\n  });\n\n  // tests complete\n  runner.on(EVENT_TEST_END, function () {\n    complete++;\n\n    var percent = complete / total;\n    var n = (width * percent) | 0;\n    var i = width - n;\n\n    if (n === lastN && !options.verbose) {\n      // Don't re-render the line if it hasn't changed\n      return;\n    }\n    lastN = n;\n\n    cursor.CR();\n    process.stdout.write('\\u001b[J');\n    process.stdout.write(color('progress', '  ' + options.open));\n    process.stdout.write(Array(n).join(options.complete));\n    process.stdout.write(Array(i).join(options.incomplete));\n    process.stdout.write(color('progress', options.close));\n    if (options.verbose) {\n      process.stdout.write(color('progress', ' ' + complete + ' of ' + total));\n    }\n  });\n\n  // tests are complete, output some stats\n  // and the failures if any\n  runner.once(EVENT_RUN_END, function () {\n    cursor.show();\n    process.stdout.write('\\n');\n    self.epilogue();\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\ninherits(Progress, Base);\n\nProgress.description = 'a progress bar';\n"]},"metadata":{},"sourceType":"script"}
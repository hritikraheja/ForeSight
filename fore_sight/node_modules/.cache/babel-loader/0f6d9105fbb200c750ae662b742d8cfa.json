{"ast":null,"code":"'use strict';\n\nconst {\n  format\n} = require('util');\n/**\n * Contains error codes, factory functions to create throwable error objects,\n * and warning/deprecation functions.\n * @module\n */\n\n/**\n * process.emitWarning or a polyfill\n * @see https://nodejs.org/api/process.html#process_process_emitwarning_warning_options\n * @ignore\n */\n\n\nconst emitWarning = (msg, type) => {\n  if (process.emitWarning) {\n    process.emitWarning(msg, type);\n  } else {\n    /* istanbul ignore next */\n    process.nextTick(function () {\n      console.warn(type + ': ' + msg);\n    });\n  }\n};\n/**\n * Show a deprecation warning. Each distinct message is only displayed once.\n * Ignores empty messages.\n *\n * @param {string} [msg] - Warning to print\n * @private\n */\n\n\nconst deprecate = msg => {\n  msg = String(msg);\n\n  if (msg && !deprecate.cache[msg]) {\n    deprecate.cache[msg] = true;\n    emitWarning(msg, 'DeprecationWarning');\n  }\n};\n\ndeprecate.cache = {};\n/**\n * Show a generic warning.\n * Ignores empty messages.\n *\n * @param {string} [msg] - Warning to print\n * @private\n */\n\nconst warn = msg => {\n  if (msg) {\n    emitWarning(msg);\n  }\n};\n/**\n * When Mocha throws exceptions (or rejects `Promise`s), it attempts to assign a `code` property to the `Error` object, for easier handling. These are the potential values of `code`.\n * @public\n * @namespace\n * @memberof module:lib/errors\n */\n\n\nvar constants = {\n  /**\n   * An unrecoverable error.\n   * @constant\n   * @default\n   */\n  FATAL: 'ERR_MOCHA_FATAL',\n\n  /**\n   * The type of an argument to a function call is invalid\n   * @constant\n   * @default\n   */\n  INVALID_ARG_TYPE: 'ERR_MOCHA_INVALID_ARG_TYPE',\n\n  /**\n   * The value of an argument to a function call is invalid\n   * @constant\n   * @default\n   */\n  INVALID_ARG_VALUE: 'ERR_MOCHA_INVALID_ARG_VALUE',\n\n  /**\n   * Something was thrown, but it wasn't an `Error`\n   * @constant\n   * @default\n   */\n  INVALID_EXCEPTION: 'ERR_MOCHA_INVALID_EXCEPTION',\n\n  /**\n   * An interface (e.g., `Mocha.interfaces`) is unknown or invalid\n   * @constant\n   * @default\n   */\n  INVALID_INTERFACE: 'ERR_MOCHA_INVALID_INTERFACE',\n\n  /**\n   * A reporter (.e.g, `Mocha.reporters`) is unknown or invalid\n   * @constant\n   * @default\n   */\n  INVALID_REPORTER: 'ERR_MOCHA_INVALID_REPORTER',\n\n  /**\n   * `done()` was called twice in a `Test` or `Hook` callback\n   * @constant\n   * @default\n   */\n  MULTIPLE_DONE: 'ERR_MOCHA_MULTIPLE_DONE',\n\n  /**\n   * No files matched the pattern provided by the user\n   * @constant\n   * @default\n   */\n  NO_FILES_MATCH_PATTERN: 'ERR_MOCHA_NO_FILES_MATCH_PATTERN',\n\n  /**\n   * Known, but unsupported behavior of some kind\n   * @constant\n   * @default\n   */\n  UNSUPPORTED: 'ERR_MOCHA_UNSUPPORTED',\n\n  /**\n   * Invalid state transition occurring in `Mocha` instance\n   * @constant\n   * @default\n   */\n  INSTANCE_ALREADY_RUNNING: 'ERR_MOCHA_INSTANCE_ALREADY_RUNNING',\n\n  /**\n   * Invalid state transition occurring in `Mocha` instance\n   * @constant\n   * @default\n   */\n  INSTANCE_ALREADY_DISPOSED: 'ERR_MOCHA_INSTANCE_ALREADY_DISPOSED',\n\n  /**\n   * Use of `only()` w/ `--forbid-only` results in this error.\n   * @constant\n   * @default\n   */\n  FORBIDDEN_EXCLUSIVITY: 'ERR_MOCHA_FORBIDDEN_EXCLUSIVITY',\n\n  /**\n   * To be thrown when a user-defined plugin implementation (e.g., `mochaHooks`) is invalid\n   * @constant\n   * @default\n   */\n  INVALID_PLUGIN_IMPLEMENTATION: 'ERR_MOCHA_INVALID_PLUGIN_IMPLEMENTATION',\n\n  /**\n   * To be thrown when a builtin or third-party plugin definition (the _definition_ of `mochaHooks`) is invalid\n   * @constant\n   * @default\n   */\n  INVALID_PLUGIN_DEFINITION: 'ERR_MOCHA_INVALID_PLUGIN_DEFINITION',\n\n  /**\n   * When a runnable exceeds its allowed run time.\n   * @constant\n   * @default\n   */\n  TIMEOUT: 'ERR_MOCHA_TIMEOUT',\n\n  /**\n   * Input file is not able to be parsed\n   * @constant\n   * @default\n   */\n  UNPARSABLE_FILE: 'ERR_MOCHA_UNPARSABLE_FILE'\n};\n/**\n * A set containing all string values of all Mocha error constants, for use by {@link isMochaError}.\n * @private\n */\n\nconst MOCHA_ERRORS = new Set(Object.values(constants));\n/**\n * Creates an error object to be thrown when no files to be tested could be found using specified pattern.\n *\n * @public\n * @static\n * @param {string} message - Error message to be displayed.\n * @param {string} pattern - User-specified argument value.\n * @returns {Error} instance detailing the error condition\n */\n\nfunction createNoFilesMatchPatternError(message, pattern) {\n  var err = new Error(message);\n  err.code = constants.NO_FILES_MATCH_PATTERN;\n  err.pattern = pattern;\n  return err;\n}\n/**\n * Creates an error object to be thrown when the reporter specified in the options was not found.\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @param {string} reporter - User-specified reporter value.\n * @returns {Error} instance detailing the error condition\n */\n\n\nfunction createInvalidReporterError(message, reporter) {\n  var err = new TypeError(message);\n  err.code = constants.INVALID_REPORTER;\n  err.reporter = reporter;\n  return err;\n}\n/**\n * Creates an error object to be thrown when the interface specified in the options was not found.\n *\n * @public\n * @static\n * @param {string} message - Error message to be displayed.\n * @param {string} ui - User-specified interface value.\n * @returns {Error} instance detailing the error condition\n */\n\n\nfunction createInvalidInterfaceError(message, ui) {\n  var err = new Error(message);\n  err.code = constants.INVALID_INTERFACE;\n  err.interface = ui;\n  return err;\n}\n/**\n * Creates an error object to be thrown when a behavior, option, or parameter is unsupported.\n *\n * @public\n * @static\n * @param {string} message - Error message to be displayed.\n * @returns {Error} instance detailing the error condition\n */\n\n\nfunction createUnsupportedError(message) {\n  var err = new Error(message);\n  err.code = constants.UNSUPPORTED;\n  return err;\n}\n/**\n * Creates an error object to be thrown when an argument is missing.\n *\n * @public\n * @static\n * @param {string} message - Error message to be displayed.\n * @param {string} argument - Argument name.\n * @param {string} expected - Expected argument datatype.\n * @returns {Error} instance detailing the error condition\n */\n\n\nfunction createMissingArgumentError(message, argument, expected) {\n  return createInvalidArgumentTypeError(message, argument, expected);\n}\n/**\n * Creates an error object to be thrown when an argument did not use the supported type\n *\n * @public\n * @static\n * @param {string} message - Error message to be displayed.\n * @param {string} argument - Argument name.\n * @param {string} expected - Expected argument datatype.\n * @returns {Error} instance detailing the error condition\n */\n\n\nfunction createInvalidArgumentTypeError(message, argument, expected) {\n  var err = new TypeError(message);\n  err.code = constants.INVALID_ARG_TYPE;\n  err.argument = argument;\n  err.expected = expected;\n  err.actual = typeof argument;\n  return err;\n}\n/**\n * Creates an error object to be thrown when an argument did not use the supported value\n *\n * @public\n * @static\n * @param {string} message - Error message to be displayed.\n * @param {string} argument - Argument name.\n * @param {string} value - Argument value.\n * @param {string} [reason] - Why value is invalid.\n * @returns {Error} instance detailing the error condition\n */\n\n\nfunction createInvalidArgumentValueError(message, argument, value, reason) {\n  var err = new TypeError(message);\n  err.code = constants.INVALID_ARG_VALUE;\n  err.argument = argument;\n  err.value = value;\n  err.reason = typeof reason !== 'undefined' ? reason : 'is invalid';\n  return err;\n}\n/**\n * Creates an error object to be thrown when an exception was caught, but the `Error` is falsy or undefined.\n *\n * @public\n * @static\n * @param {string} message - Error message to be displayed.\n * @returns {Error} instance detailing the error condition\n */\n\n\nfunction createInvalidExceptionError(message, value) {\n  var err = new Error(message);\n  err.code = constants.INVALID_EXCEPTION;\n  err.valueType = typeof value;\n  err.value = value;\n  return err;\n}\n/**\n * Creates an error object to be thrown when an unrecoverable error occurs.\n *\n * @public\n * @static\n * @param {string} message - Error message to be displayed.\n * @returns {Error} instance detailing the error condition\n */\n\n\nfunction createFatalError(message, value) {\n  var err = new Error(message);\n  err.code = constants.FATAL;\n  err.valueType = typeof value;\n  err.value = value;\n  return err;\n}\n/**\n * Dynamically creates a plugin-type-specific error based on plugin type\n * @param {string} message - Error message\n * @param {\"reporter\"|\"ui\"} pluginType - Plugin type. Future: expand as needed\n * @param {string} [pluginId] - Name/path of plugin, if any\n * @throws When `pluginType` is not known\n * @public\n * @static\n * @returns {Error}\n */\n\n\nfunction createInvalidLegacyPluginError(message, pluginType, pluginId) {\n  switch (pluginType) {\n    case 'reporter':\n      return createInvalidReporterError(message, pluginId);\n\n    case 'ui':\n      return createInvalidInterfaceError(message, pluginId);\n\n    default:\n      throw new Error('unknown pluginType \"' + pluginType + '\"');\n  }\n}\n/**\n * **DEPRECATED**.  Use {@link createInvalidLegacyPluginError} instead  Dynamically creates a plugin-type-specific error based on plugin type\n * @deprecated\n * @param {string} message - Error message\n * @param {\"reporter\"|\"interface\"} pluginType - Plugin type. Future: expand as needed\n * @param {string} [pluginId] - Name/path of plugin, if any\n * @throws When `pluginType` is not known\n * @public\n * @static\n * @returns {Error}\n */\n\n\nfunction createInvalidPluginError() {\n  deprecate('Use createInvalidLegacyPluginError() instead');\n  return createInvalidLegacyPluginError(...arguments);\n}\n/**\n * Creates an error object to be thrown when a mocha object's `run` method is executed while it is already disposed.\n * @param {string} message The error message to be displayed.\n * @param {boolean} cleanReferencesAfterRun the value of `cleanReferencesAfterRun`\n * @param {Mocha} instance the mocha instance that throw this error\n * @static\n */\n\n\nfunction createMochaInstanceAlreadyDisposedError(message, cleanReferencesAfterRun, instance) {\n  var err = new Error(message);\n  err.code = constants.INSTANCE_ALREADY_DISPOSED;\n  err.cleanReferencesAfterRun = cleanReferencesAfterRun;\n  err.instance = instance;\n  return err;\n}\n/**\n * Creates an error object to be thrown when a mocha object's `run` method is called while a test run is in progress.\n * @param {string} message The error message to be displayed.\n * @static\n * @public\n */\n\n\nfunction createMochaInstanceAlreadyRunningError(message, instance) {\n  var err = new Error(message);\n  err.code = constants.INSTANCE_ALREADY_RUNNING;\n  err.instance = instance;\n  return err;\n}\n/**\n * Creates an error object to be thrown when done() is called multiple times in a test\n *\n * @public\n * @param {Runnable} runnable - Original runnable\n * @param {Error} [originalErr] - Original error, if any\n * @returns {Error} instance detailing the error condition\n * @static\n */\n\n\nfunction createMultipleDoneError(runnable, originalErr) {\n  var title;\n\n  try {\n    title = format('<%s>', runnable.fullTitle());\n\n    if (runnable.parent.root) {\n      title += ' (of root suite)';\n    }\n  } catch (ignored) {\n    title = format('<%s> (of unknown suite)', runnable.title);\n  }\n\n  var message = format('done() called multiple times in %s %s', runnable.type ? runnable.type : 'unknown runnable', title);\n\n  if (runnable.file) {\n    message += format(' of file %s', runnable.file);\n  }\n\n  if (originalErr) {\n    message += format('; in addition, done() received error: %s', originalErr);\n  }\n\n  var err = new Error(message);\n  err.code = constants.MULTIPLE_DONE;\n  err.valueType = typeof originalErr;\n  err.value = originalErr;\n  return err;\n}\n/**\n * Creates an error object to be thrown when `.only()` is used with\n * `--forbid-only`.\n * @static\n * @public\n * @param {Mocha} mocha - Mocha instance\n * @returns {Error} Error with code {@link constants.FORBIDDEN_EXCLUSIVITY}\n */\n\n\nfunction createForbiddenExclusivityError(mocha) {\n  var err = new Error(mocha.isWorker ? '`.only` is not supported in parallel mode' : '`.only` forbidden by --forbid-only');\n  err.code = constants.FORBIDDEN_EXCLUSIVITY;\n  return err;\n}\n/**\n * Creates an error object to be thrown when a plugin definition is invalid\n * @static\n * @param {string} msg - Error message\n * @param {PluginDefinition} [pluginDef] - Problematic plugin definition\n * @public\n * @returns {Error} Error with code {@link constants.INVALID_PLUGIN_DEFINITION}\n */\n\n\nfunction createInvalidPluginDefinitionError(msg, pluginDef) {\n  const err = new Error(msg);\n  err.code = constants.INVALID_PLUGIN_DEFINITION;\n  err.pluginDef = pluginDef;\n  return err;\n}\n/**\n * Creates an error object to be thrown when a plugin implementation (user code) is invalid\n * @static\n * @param {string} msg - Error message\n * @param {Object} [opts] - Plugin definition and user-supplied implementation\n * @param {PluginDefinition} [opts.pluginDef] - Plugin Definition\n * @param {*} [opts.pluginImpl] - Plugin Implementation (user-supplied)\n * @public\n * @returns {Error} Error with code {@link constants.INVALID_PLUGIN_DEFINITION}\n */\n\n\nfunction createInvalidPluginImplementationError(msg) {\n  let {\n    pluginDef,\n    pluginImpl\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const err = new Error(msg);\n  err.code = constants.INVALID_PLUGIN_IMPLEMENTATION;\n  err.pluginDef = pluginDef;\n  err.pluginImpl = pluginImpl;\n  return err;\n}\n/**\n * Creates an error object to be thrown when a runnable exceeds its allowed run time.\n * @static\n * @param {string} msg - Error message\n * @param {number} [timeout] - Timeout in ms\n * @param {string} [file] - File, if given\n * @returns {MochaTimeoutError}\n */\n\n\nfunction createTimeoutError(msg, timeout, file) {\n  const err = new Error(msg);\n  err.code = constants.TIMEOUT;\n  err.timeout = timeout;\n  err.file = file;\n  return err;\n}\n/**\n * Creates an error object to be thrown when file is unparsable\n * @public\n * @static\n * @param {string} message - Error message to be displayed.\n * @param {string} filename - File name\n * @returns {Error} Error with code {@link constants.UNPARSABLE_FILE}\n */\n\n\nfunction createUnparsableFileError(message, filename) {\n  var err = new Error(message);\n  err.code = constants.UNPARSABLE_FILE;\n  return err;\n}\n/**\n * Returns `true` if an error came out of Mocha.\n * _Can suffer from false negatives, but not false positives._\n * @static\n * @public\n * @param {*} err - Error, or anything\n * @returns {boolean}\n */\n\n\nconst isMochaError = err => Boolean(err && typeof err === 'object' && MOCHA_ERRORS.has(err.code));\n\nmodule.exports = {\n  constants,\n  createFatalError,\n  createForbiddenExclusivityError,\n  createInvalidArgumentTypeError,\n  createInvalidArgumentValueError,\n  createInvalidExceptionError,\n  createInvalidInterfaceError,\n  createInvalidLegacyPluginError,\n  createInvalidPluginDefinitionError,\n  createInvalidPluginError,\n  createInvalidPluginImplementationError,\n  createInvalidReporterError,\n  createMissingArgumentError,\n  createMochaInstanceAlreadyDisposedError,\n  createMochaInstanceAlreadyRunningError,\n  createMultipleDoneError,\n  createNoFilesMatchPatternError,\n  createTimeoutError,\n  createUnparsableFileError,\n  createUnsupportedError,\n  deprecate,\n  isMochaError,\n  warn\n};\n/**\n * The error thrown when a Runnable times out\n * @memberof module:lib/errors\n * @typedef {Error} MochaTimeoutError\n * @property {constants.TIMEOUT} code - Error code\n * @property {number?} timeout Timeout in ms\n * @property {string?} file Filepath, if given\n */","map":{"version":3,"sources":["C:/Users/91805/node_modules/mocha/lib/errors.js"],"names":["format","require","emitWarning","msg","type","process","nextTick","console","warn","deprecate","String","cache","constants","FATAL","INVALID_ARG_TYPE","INVALID_ARG_VALUE","INVALID_EXCEPTION","INVALID_INTERFACE","INVALID_REPORTER","MULTIPLE_DONE","NO_FILES_MATCH_PATTERN","UNSUPPORTED","INSTANCE_ALREADY_RUNNING","INSTANCE_ALREADY_DISPOSED","FORBIDDEN_EXCLUSIVITY","INVALID_PLUGIN_IMPLEMENTATION","INVALID_PLUGIN_DEFINITION","TIMEOUT","UNPARSABLE_FILE","MOCHA_ERRORS","Set","Object","values","createNoFilesMatchPatternError","message","pattern","err","Error","code","createInvalidReporterError","reporter","TypeError","createInvalidInterfaceError","ui","interface","createUnsupportedError","createMissingArgumentError","argument","expected","createInvalidArgumentTypeError","actual","createInvalidArgumentValueError","value","reason","createInvalidExceptionError","valueType","createFatalError","createInvalidLegacyPluginError","pluginType","pluginId","createInvalidPluginError","createMochaInstanceAlreadyDisposedError","cleanReferencesAfterRun","instance","createMochaInstanceAlreadyRunningError","createMultipleDoneError","runnable","originalErr","title","fullTitle","parent","root","ignored","file","createForbiddenExclusivityError","mocha","isWorker","createInvalidPluginDefinitionError","pluginDef","createInvalidPluginImplementationError","pluginImpl","createTimeoutError","timeout","createUnparsableFileError","filename","isMochaError","Boolean","has","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst {format} = require('util');\n\n/**\n * Contains error codes, factory functions to create throwable error objects,\n * and warning/deprecation functions.\n * @module\n */\n\n/**\n * process.emitWarning or a polyfill\n * @see https://nodejs.org/api/process.html#process_process_emitwarning_warning_options\n * @ignore\n */\nconst emitWarning = (msg, type) => {\n  if (process.emitWarning) {\n    process.emitWarning(msg, type);\n  } else {\n    /* istanbul ignore next */\n    process.nextTick(function () {\n      console.warn(type + ': ' + msg);\n    });\n  }\n};\n\n/**\n * Show a deprecation warning. Each distinct message is only displayed once.\n * Ignores empty messages.\n *\n * @param {string} [msg] - Warning to print\n * @private\n */\nconst deprecate = msg => {\n  msg = String(msg);\n  if (msg && !deprecate.cache[msg]) {\n    deprecate.cache[msg] = true;\n    emitWarning(msg, 'DeprecationWarning');\n  }\n};\ndeprecate.cache = {};\n\n/**\n * Show a generic warning.\n * Ignores empty messages.\n *\n * @param {string} [msg] - Warning to print\n * @private\n */\nconst warn = msg => {\n  if (msg) {\n    emitWarning(msg);\n  }\n};\n\n/**\n * When Mocha throws exceptions (or rejects `Promise`s), it attempts to assign a `code` property to the `Error` object, for easier handling. These are the potential values of `code`.\n * @public\n * @namespace\n * @memberof module:lib/errors\n */\nvar constants = {\n  /**\n   * An unrecoverable error.\n   * @constant\n   * @default\n   */\n  FATAL: 'ERR_MOCHA_FATAL',\n\n  /**\n   * The type of an argument to a function call is invalid\n   * @constant\n   * @default\n   */\n  INVALID_ARG_TYPE: 'ERR_MOCHA_INVALID_ARG_TYPE',\n\n  /**\n   * The value of an argument to a function call is invalid\n   * @constant\n   * @default\n   */\n  INVALID_ARG_VALUE: 'ERR_MOCHA_INVALID_ARG_VALUE',\n\n  /**\n   * Something was thrown, but it wasn't an `Error`\n   * @constant\n   * @default\n   */\n  INVALID_EXCEPTION: 'ERR_MOCHA_INVALID_EXCEPTION',\n\n  /**\n   * An interface (e.g., `Mocha.interfaces`) is unknown or invalid\n   * @constant\n   * @default\n   */\n  INVALID_INTERFACE: 'ERR_MOCHA_INVALID_INTERFACE',\n\n  /**\n   * A reporter (.e.g, `Mocha.reporters`) is unknown or invalid\n   * @constant\n   * @default\n   */\n  INVALID_REPORTER: 'ERR_MOCHA_INVALID_REPORTER',\n\n  /**\n   * `done()` was called twice in a `Test` or `Hook` callback\n   * @constant\n   * @default\n   */\n  MULTIPLE_DONE: 'ERR_MOCHA_MULTIPLE_DONE',\n\n  /**\n   * No files matched the pattern provided by the user\n   * @constant\n   * @default\n   */\n  NO_FILES_MATCH_PATTERN: 'ERR_MOCHA_NO_FILES_MATCH_PATTERN',\n\n  /**\n   * Known, but unsupported behavior of some kind\n   * @constant\n   * @default\n   */\n  UNSUPPORTED: 'ERR_MOCHA_UNSUPPORTED',\n\n  /**\n   * Invalid state transition occurring in `Mocha` instance\n   * @constant\n   * @default\n   */\n  INSTANCE_ALREADY_RUNNING: 'ERR_MOCHA_INSTANCE_ALREADY_RUNNING',\n\n  /**\n   * Invalid state transition occurring in `Mocha` instance\n   * @constant\n   * @default\n   */\n  INSTANCE_ALREADY_DISPOSED: 'ERR_MOCHA_INSTANCE_ALREADY_DISPOSED',\n\n  /**\n   * Use of `only()` w/ `--forbid-only` results in this error.\n   * @constant\n   * @default\n   */\n  FORBIDDEN_EXCLUSIVITY: 'ERR_MOCHA_FORBIDDEN_EXCLUSIVITY',\n\n  /**\n   * To be thrown when a user-defined plugin implementation (e.g., `mochaHooks`) is invalid\n   * @constant\n   * @default\n   */\n  INVALID_PLUGIN_IMPLEMENTATION: 'ERR_MOCHA_INVALID_PLUGIN_IMPLEMENTATION',\n\n  /**\n   * To be thrown when a builtin or third-party plugin definition (the _definition_ of `mochaHooks`) is invalid\n   * @constant\n   * @default\n   */\n  INVALID_PLUGIN_DEFINITION: 'ERR_MOCHA_INVALID_PLUGIN_DEFINITION',\n\n  /**\n   * When a runnable exceeds its allowed run time.\n   * @constant\n   * @default\n   */\n  TIMEOUT: 'ERR_MOCHA_TIMEOUT',\n\n  /**\n   * Input file is not able to be parsed\n   * @constant\n   * @default\n   */\n  UNPARSABLE_FILE: 'ERR_MOCHA_UNPARSABLE_FILE'\n};\n\n/**\n * A set containing all string values of all Mocha error constants, for use by {@link isMochaError}.\n * @private\n */\nconst MOCHA_ERRORS = new Set(Object.values(constants));\n\n/**\n * Creates an error object to be thrown when no files to be tested could be found using specified pattern.\n *\n * @public\n * @static\n * @param {string} message - Error message to be displayed.\n * @param {string} pattern - User-specified argument value.\n * @returns {Error} instance detailing the error condition\n */\nfunction createNoFilesMatchPatternError(message, pattern) {\n  var err = new Error(message);\n  err.code = constants.NO_FILES_MATCH_PATTERN;\n  err.pattern = pattern;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when the reporter specified in the options was not found.\n *\n * @public\n * @param {string} message - Error message to be displayed.\n * @param {string} reporter - User-specified reporter value.\n * @returns {Error} instance detailing the error condition\n */\nfunction createInvalidReporterError(message, reporter) {\n  var err = new TypeError(message);\n  err.code = constants.INVALID_REPORTER;\n  err.reporter = reporter;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when the interface specified in the options was not found.\n *\n * @public\n * @static\n * @param {string} message - Error message to be displayed.\n * @param {string} ui - User-specified interface value.\n * @returns {Error} instance detailing the error condition\n */\nfunction createInvalidInterfaceError(message, ui) {\n  var err = new Error(message);\n  err.code = constants.INVALID_INTERFACE;\n  err.interface = ui;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when a behavior, option, or parameter is unsupported.\n *\n * @public\n * @static\n * @param {string} message - Error message to be displayed.\n * @returns {Error} instance detailing the error condition\n */\nfunction createUnsupportedError(message) {\n  var err = new Error(message);\n  err.code = constants.UNSUPPORTED;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when an argument is missing.\n *\n * @public\n * @static\n * @param {string} message - Error message to be displayed.\n * @param {string} argument - Argument name.\n * @param {string} expected - Expected argument datatype.\n * @returns {Error} instance detailing the error condition\n */\nfunction createMissingArgumentError(message, argument, expected) {\n  return createInvalidArgumentTypeError(message, argument, expected);\n}\n\n/**\n * Creates an error object to be thrown when an argument did not use the supported type\n *\n * @public\n * @static\n * @param {string} message - Error message to be displayed.\n * @param {string} argument - Argument name.\n * @param {string} expected - Expected argument datatype.\n * @returns {Error} instance detailing the error condition\n */\nfunction createInvalidArgumentTypeError(message, argument, expected) {\n  var err = new TypeError(message);\n  err.code = constants.INVALID_ARG_TYPE;\n  err.argument = argument;\n  err.expected = expected;\n  err.actual = typeof argument;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when an argument did not use the supported value\n *\n * @public\n * @static\n * @param {string} message - Error message to be displayed.\n * @param {string} argument - Argument name.\n * @param {string} value - Argument value.\n * @param {string} [reason] - Why value is invalid.\n * @returns {Error} instance detailing the error condition\n */\nfunction createInvalidArgumentValueError(message, argument, value, reason) {\n  var err = new TypeError(message);\n  err.code = constants.INVALID_ARG_VALUE;\n  err.argument = argument;\n  err.value = value;\n  err.reason = typeof reason !== 'undefined' ? reason : 'is invalid';\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when an exception was caught, but the `Error` is falsy or undefined.\n *\n * @public\n * @static\n * @param {string} message - Error message to be displayed.\n * @returns {Error} instance detailing the error condition\n */\nfunction createInvalidExceptionError(message, value) {\n  var err = new Error(message);\n  err.code = constants.INVALID_EXCEPTION;\n  err.valueType = typeof value;\n  err.value = value;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when an unrecoverable error occurs.\n *\n * @public\n * @static\n * @param {string} message - Error message to be displayed.\n * @returns {Error} instance detailing the error condition\n */\nfunction createFatalError(message, value) {\n  var err = new Error(message);\n  err.code = constants.FATAL;\n  err.valueType = typeof value;\n  err.value = value;\n  return err;\n}\n\n/**\n * Dynamically creates a plugin-type-specific error based on plugin type\n * @param {string} message - Error message\n * @param {\"reporter\"|\"ui\"} pluginType - Plugin type. Future: expand as needed\n * @param {string} [pluginId] - Name/path of plugin, if any\n * @throws When `pluginType` is not known\n * @public\n * @static\n * @returns {Error}\n */\nfunction createInvalidLegacyPluginError(message, pluginType, pluginId) {\n  switch (pluginType) {\n    case 'reporter':\n      return createInvalidReporterError(message, pluginId);\n    case 'ui':\n      return createInvalidInterfaceError(message, pluginId);\n    default:\n      throw new Error('unknown pluginType \"' + pluginType + '\"');\n  }\n}\n\n/**\n * **DEPRECATED**.  Use {@link createInvalidLegacyPluginError} instead  Dynamically creates a plugin-type-specific error based on plugin type\n * @deprecated\n * @param {string} message - Error message\n * @param {\"reporter\"|\"interface\"} pluginType - Plugin type. Future: expand as needed\n * @param {string} [pluginId] - Name/path of plugin, if any\n * @throws When `pluginType` is not known\n * @public\n * @static\n * @returns {Error}\n */\nfunction createInvalidPluginError(...args) {\n  deprecate('Use createInvalidLegacyPluginError() instead');\n  return createInvalidLegacyPluginError(...args);\n}\n\n/**\n * Creates an error object to be thrown when a mocha object's `run` method is executed while it is already disposed.\n * @param {string} message The error message to be displayed.\n * @param {boolean} cleanReferencesAfterRun the value of `cleanReferencesAfterRun`\n * @param {Mocha} instance the mocha instance that throw this error\n * @static\n */\nfunction createMochaInstanceAlreadyDisposedError(\n  message,\n  cleanReferencesAfterRun,\n  instance\n) {\n  var err = new Error(message);\n  err.code = constants.INSTANCE_ALREADY_DISPOSED;\n  err.cleanReferencesAfterRun = cleanReferencesAfterRun;\n  err.instance = instance;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when a mocha object's `run` method is called while a test run is in progress.\n * @param {string} message The error message to be displayed.\n * @static\n * @public\n */\nfunction createMochaInstanceAlreadyRunningError(message, instance) {\n  var err = new Error(message);\n  err.code = constants.INSTANCE_ALREADY_RUNNING;\n  err.instance = instance;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when done() is called multiple times in a test\n *\n * @public\n * @param {Runnable} runnable - Original runnable\n * @param {Error} [originalErr] - Original error, if any\n * @returns {Error} instance detailing the error condition\n * @static\n */\nfunction createMultipleDoneError(runnable, originalErr) {\n  var title;\n  try {\n    title = format('<%s>', runnable.fullTitle());\n    if (runnable.parent.root) {\n      title += ' (of root suite)';\n    }\n  } catch (ignored) {\n    title = format('<%s> (of unknown suite)', runnable.title);\n  }\n  var message = format(\n    'done() called multiple times in %s %s',\n    runnable.type ? runnable.type : 'unknown runnable',\n    title\n  );\n  if (runnable.file) {\n    message += format(' of file %s', runnable.file);\n  }\n  if (originalErr) {\n    message += format('; in addition, done() received error: %s', originalErr);\n  }\n\n  var err = new Error(message);\n  err.code = constants.MULTIPLE_DONE;\n  err.valueType = typeof originalErr;\n  err.value = originalErr;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when `.only()` is used with\n * `--forbid-only`.\n * @static\n * @public\n * @param {Mocha} mocha - Mocha instance\n * @returns {Error} Error with code {@link constants.FORBIDDEN_EXCLUSIVITY}\n */\nfunction createForbiddenExclusivityError(mocha) {\n  var err = new Error(\n    mocha.isWorker\n      ? '`.only` is not supported in parallel mode'\n      : '`.only` forbidden by --forbid-only'\n  );\n  err.code = constants.FORBIDDEN_EXCLUSIVITY;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when a plugin definition is invalid\n * @static\n * @param {string} msg - Error message\n * @param {PluginDefinition} [pluginDef] - Problematic plugin definition\n * @public\n * @returns {Error} Error with code {@link constants.INVALID_PLUGIN_DEFINITION}\n */\nfunction createInvalidPluginDefinitionError(msg, pluginDef) {\n  const err = new Error(msg);\n  err.code = constants.INVALID_PLUGIN_DEFINITION;\n  err.pluginDef = pluginDef;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when a plugin implementation (user code) is invalid\n * @static\n * @param {string} msg - Error message\n * @param {Object} [opts] - Plugin definition and user-supplied implementation\n * @param {PluginDefinition} [opts.pluginDef] - Plugin Definition\n * @param {*} [opts.pluginImpl] - Plugin Implementation (user-supplied)\n * @public\n * @returns {Error} Error with code {@link constants.INVALID_PLUGIN_DEFINITION}\n */\nfunction createInvalidPluginImplementationError(\n  msg,\n  {pluginDef, pluginImpl} = {}\n) {\n  const err = new Error(msg);\n  err.code = constants.INVALID_PLUGIN_IMPLEMENTATION;\n  err.pluginDef = pluginDef;\n  err.pluginImpl = pluginImpl;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when a runnable exceeds its allowed run time.\n * @static\n * @param {string} msg - Error message\n * @param {number} [timeout] - Timeout in ms\n * @param {string} [file] - File, if given\n * @returns {MochaTimeoutError}\n */\nfunction createTimeoutError(msg, timeout, file) {\n  const err = new Error(msg);\n  err.code = constants.TIMEOUT;\n  err.timeout = timeout;\n  err.file = file;\n  return err;\n}\n\n/**\n * Creates an error object to be thrown when file is unparsable\n * @public\n * @static\n * @param {string} message - Error message to be displayed.\n * @param {string} filename - File name\n * @returns {Error} Error with code {@link constants.UNPARSABLE_FILE}\n */\nfunction createUnparsableFileError(message, filename) {\n  var err = new Error(message);\n  err.code = constants.UNPARSABLE_FILE;\n  return err;\n}\n\n/**\n * Returns `true` if an error came out of Mocha.\n * _Can suffer from false negatives, but not false positives._\n * @static\n * @public\n * @param {*} err - Error, or anything\n * @returns {boolean}\n */\nconst isMochaError = err =>\n  Boolean(err && typeof err === 'object' && MOCHA_ERRORS.has(err.code));\n\nmodule.exports = {\n  constants,\n  createFatalError,\n  createForbiddenExclusivityError,\n  createInvalidArgumentTypeError,\n  createInvalidArgumentValueError,\n  createInvalidExceptionError,\n  createInvalidInterfaceError,\n  createInvalidLegacyPluginError,\n  createInvalidPluginDefinitionError,\n  createInvalidPluginError,\n  createInvalidPluginImplementationError,\n  createInvalidReporterError,\n  createMissingArgumentError,\n  createMochaInstanceAlreadyDisposedError,\n  createMochaInstanceAlreadyRunningError,\n  createMultipleDoneError,\n  createNoFilesMatchPatternError,\n  createTimeoutError,\n  createUnparsableFileError,\n  createUnsupportedError,\n  deprecate,\n  isMochaError,\n  warn\n};\n\n/**\n * The error thrown when a Runnable times out\n * @memberof module:lib/errors\n * @typedef {Error} MochaTimeoutError\n * @property {constants.TIMEOUT} code - Error code\n * @property {number?} timeout Timeout in ms\n * @property {string?} file Filepath, if given\n */\n"]},"metadata":{},"sourceType":"script"}
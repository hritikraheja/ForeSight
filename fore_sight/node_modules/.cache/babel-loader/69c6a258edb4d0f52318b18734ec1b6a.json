{"ast":null,"code":"'use strict';\n/**\n * @module Markdown\n */\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\n\nvar utils = require('../utils');\n\nvar constants = require('../runner').constants;\n\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\nvar EVENT_SUITE_BEGIN = constants.EVENT_SUITE_BEGIN;\nvar EVENT_SUITE_END = constants.EVENT_SUITE_END;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\n/**\n * Constants\n */\n\nvar SUITE_PREFIX = '$';\n/**\n * Expose `Markdown`.\n */\n\nexports = module.exports = Markdown;\n/**\n * Constructs a new `Markdown` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\n\nfunction Markdown(runner, options) {\n  Base.call(this, runner, options);\n  var level = 0;\n  var buf = '';\n\n  function title(str) {\n    return Array(level).join('#') + ' ' + str;\n  }\n\n  function mapTOC(suite, obj) {\n    var ret = obj;\n    var key = SUITE_PREFIX + suite.title;\n    obj = obj[key] = obj[key] || {\n      suite: suite\n    };\n    suite.suites.forEach(function (suite) {\n      mapTOC(suite, obj);\n    });\n    return ret;\n  }\n\n  function stringifyTOC(obj, level) {\n    ++level;\n    var buf = '';\n    var link;\n\n    for (var key in obj) {\n      if (key === 'suite') {\n        continue;\n      }\n\n      if (key !== SUITE_PREFIX) {\n        link = ' - [' + key.substring(1) + ']';\n        link += '(#' + utils.slug(obj[key].suite.fullTitle()) + ')\\n';\n        buf += Array(level).join('  ') + link;\n      }\n\n      buf += stringifyTOC(obj[key], level);\n    }\n\n    return buf;\n  }\n\n  function generateTOC(suite) {\n    var obj = mapTOC(suite, {});\n    return stringifyTOC(obj, 0);\n  }\n\n  generateTOC(runner.suite);\n  runner.on(EVENT_SUITE_BEGIN, function (suite) {\n    ++level;\n    var slug = utils.slug(suite.fullTitle());\n    buf += '<a name=\"' + slug + '\"></a>' + '\\n';\n    buf += title(suite.title) + '\\n';\n  });\n  runner.on(EVENT_SUITE_END, function () {\n    --level;\n  });\n  runner.on(EVENT_TEST_PASS, function (test) {\n    var code = utils.clean(test.body);\n    buf += test.title + '.\\n';\n    buf += '\\n```js\\n';\n    buf += code + '\\n';\n    buf += '```\\n\\n';\n  });\n  runner.once(EVENT_RUN_END, function () {\n    process.stdout.write('# TOC\\n');\n    process.stdout.write(generateTOC(runner.suite));\n    process.stdout.write(buf);\n  });\n}\n\nMarkdown.description = 'GitHub Flavored Markdown';","map":{"version":3,"sources":["C:/Users/91805/node_modules/mocha/lib/reporters/markdown.js"],"names":["Base","require","utils","constants","EVENT_RUN_END","EVENT_SUITE_BEGIN","EVENT_SUITE_END","EVENT_TEST_PASS","SUITE_PREFIX","exports","module","Markdown","runner","options","call","level","buf","title","str","Array","join","mapTOC","suite","obj","ret","key","suites","forEach","stringifyTOC","link","substring","slug","fullTitle","generateTOC","on","test","code","clean","body","once","process","stdout","write","description"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * @module Markdown\n */\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar utils = require('../utils');\nvar constants = require('../runner').constants;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\nvar EVENT_SUITE_BEGIN = constants.EVENT_SUITE_BEGIN;\nvar EVENT_SUITE_END = constants.EVENT_SUITE_END;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\n\n/**\n * Constants\n */\n\nvar SUITE_PREFIX = '$';\n\n/**\n * Expose `Markdown`.\n */\n\nexports = module.exports = Markdown;\n\n/**\n * Constructs a new `Markdown` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction Markdown(runner, options) {\n  Base.call(this, runner, options);\n\n  var level = 0;\n  var buf = '';\n\n  function title(str) {\n    return Array(level).join('#') + ' ' + str;\n  }\n\n  function mapTOC(suite, obj) {\n    var ret = obj;\n    var key = SUITE_PREFIX + suite.title;\n\n    obj = obj[key] = obj[key] || {suite: suite};\n    suite.suites.forEach(function (suite) {\n      mapTOC(suite, obj);\n    });\n\n    return ret;\n  }\n\n  function stringifyTOC(obj, level) {\n    ++level;\n    var buf = '';\n    var link;\n    for (var key in obj) {\n      if (key === 'suite') {\n        continue;\n      }\n      if (key !== SUITE_PREFIX) {\n        link = ' - [' + key.substring(1) + ']';\n        link += '(#' + utils.slug(obj[key].suite.fullTitle()) + ')\\n';\n        buf += Array(level).join('  ') + link;\n      }\n      buf += stringifyTOC(obj[key], level);\n    }\n    return buf;\n  }\n\n  function generateTOC(suite) {\n    var obj = mapTOC(suite, {});\n    return stringifyTOC(obj, 0);\n  }\n\n  generateTOC(runner.suite);\n\n  runner.on(EVENT_SUITE_BEGIN, function (suite) {\n    ++level;\n    var slug = utils.slug(suite.fullTitle());\n    buf += '<a name=\"' + slug + '\"></a>' + '\\n';\n    buf += title(suite.title) + '\\n';\n  });\n\n  runner.on(EVENT_SUITE_END, function () {\n    --level;\n  });\n\n  runner.on(EVENT_TEST_PASS, function (test) {\n    var code = utils.clean(test.body);\n    buf += test.title + '.\\n';\n    buf += '\\n```js\\n';\n    buf += code + '\\n';\n    buf += '```\\n\\n';\n  });\n\n  runner.once(EVENT_RUN_END, function () {\n    process.stdout.write('# TOC\\n');\n    process.stdout.write(generateTOC(runner.suite));\n    process.stdout.write(buf);\n  });\n}\n\nMarkdown.description = 'GitHub Flavored Markdown';\n"]},"metadata":{},"sourceType":"script"}
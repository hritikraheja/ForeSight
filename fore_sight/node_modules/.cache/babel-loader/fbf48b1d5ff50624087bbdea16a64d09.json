{"ast":null,"code":"'use strict';\n/**\n * @module JSONStream\n */\n\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\n\nvar constants = require('../runner').constants;\n\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\nvar EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\n/**\n * Expose `JSONStream`.\n */\n\nexports = module.exports = JSONStream;\n/**\n * Constructs a new `JSONStream` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\n\nfunction JSONStream(runner, options) {\n  Base.call(this, runner, options);\n  var self = this;\n  var total = runner.total;\n  runner.once(EVENT_RUN_BEGIN, function () {\n    writeEvent(['start', {\n      total: total\n    }]);\n  });\n  runner.on(EVENT_TEST_PASS, function (test) {\n    writeEvent(['pass', clean(test)]);\n  });\n  runner.on(EVENT_TEST_FAIL, function (test, err) {\n    test = clean(test);\n    test.err = err.message;\n    test.stack = err.stack || null;\n    writeEvent(['fail', test]);\n  });\n  runner.once(EVENT_RUN_END, function () {\n    writeEvent(['end', self.stats]);\n  });\n}\n/**\n * Mocha event to be written to the output stream.\n * @typedef {Array} JSONStream~MochaEvent\n */\n\n/**\n * Writes Mocha event to reporter output stream.\n *\n * @private\n * @param {JSONStream~MochaEvent} event - Mocha event to be output.\n */\n\n\nfunction writeEvent(event) {\n  process.stdout.write(JSON.stringify(event) + '\\n');\n}\n/**\n * Returns an object literal representation of `test`\n * free of cyclic properties, etc.\n *\n * @private\n * @param {Test} test - Instance used as data source.\n * @return {Object} object containing pared-down test instance data\n */\n\n\nfunction clean(test) {\n  return {\n    title: test.title,\n    fullTitle: test.fullTitle(),\n    file: test.file,\n    duration: test.duration,\n    currentRetry: test.currentRetry(),\n    speed: test.speed\n  };\n}\n\nJSONStream.description = 'newline delimited JSON events';","map":{"version":3,"sources":["C:/Users/91805/node_modules/mocha/lib/reporters/json-stream.js"],"names":["Base","require","constants","EVENT_TEST_PASS","EVENT_TEST_FAIL","EVENT_RUN_BEGIN","EVENT_RUN_END","exports","module","JSONStream","runner","options","call","self","total","once","writeEvent","on","test","clean","err","message","stack","stats","event","process","stdout","write","JSON","stringify","title","fullTitle","file","duration","currentRetry","speed","description"],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAP,CAAqBC,SAArC;;AACA,IAAIC,eAAe,GAAGD,SAAS,CAACC,eAAhC;AACA,IAAIC,eAAe,GAAGF,SAAS,CAACE,eAAhC;AACA,IAAIC,eAAe,GAAGH,SAAS,CAACG,eAAhC;AACA,IAAIC,aAAa,GAAGJ,SAAS,CAACI,aAA9B;AAEA;AACA;AACA;;AAEAC,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBE,UAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,UAAT,CAAoBC,MAApB,EAA4BC,OAA5B,EAAqC;AACnCX,EAAAA,IAAI,CAACY,IAAL,CAAU,IAAV,EAAgBF,MAAhB,EAAwBC,OAAxB;AAEA,MAAIE,IAAI,GAAG,IAAX;AACA,MAAIC,KAAK,GAAGJ,MAAM,CAACI,KAAnB;AAEAJ,EAAAA,MAAM,CAACK,IAAP,CAAYV,eAAZ,EAA6B,YAAY;AACvCW,IAAAA,UAAU,CAAC,CAAC,OAAD,EAAU;AAACF,MAAAA,KAAK,EAAEA;AAAR,KAAV,CAAD,CAAV;AACD,GAFD;AAIAJ,EAAAA,MAAM,CAACO,EAAP,CAAUd,eAAV,EAA2B,UAAUe,IAAV,EAAgB;AACzCF,IAAAA,UAAU,CAAC,CAAC,MAAD,EAASG,KAAK,CAACD,IAAD,CAAd,CAAD,CAAV;AACD,GAFD;AAIAR,EAAAA,MAAM,CAACO,EAAP,CAAUb,eAAV,EAA2B,UAAUc,IAAV,EAAgBE,GAAhB,EAAqB;AAC9CF,IAAAA,IAAI,GAAGC,KAAK,CAACD,IAAD,CAAZ;AACAA,IAAAA,IAAI,CAACE,GAAL,GAAWA,GAAG,CAACC,OAAf;AACAH,IAAAA,IAAI,CAACI,KAAL,GAAaF,GAAG,CAACE,KAAJ,IAAa,IAA1B;AACAN,IAAAA,UAAU,CAAC,CAAC,MAAD,EAASE,IAAT,CAAD,CAAV;AACD,GALD;AAOAR,EAAAA,MAAM,CAACK,IAAP,CAAYT,aAAZ,EAA2B,YAAY;AACrCU,IAAAA,UAAU,CAAC,CAAC,KAAD,EAAQH,IAAI,CAACU,KAAb,CAAD,CAAV;AACD,GAFD;AAGD;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASP,UAAT,CAAoBQ,KAApB,EAA2B;AACzBC,EAAAA,OAAO,CAACC,MAAR,CAAeC,KAAf,CAAqBC,IAAI,CAACC,SAAL,CAAeL,KAAf,IAAwB,IAA7C;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASL,KAAT,CAAeD,IAAf,EAAqB;AACnB,SAAO;AACLY,IAAAA,KAAK,EAAEZ,IAAI,CAACY,KADP;AAELC,IAAAA,SAAS,EAAEb,IAAI,CAACa,SAAL,EAFN;AAGLC,IAAAA,IAAI,EAAEd,IAAI,CAACc,IAHN;AAILC,IAAAA,QAAQ,EAAEf,IAAI,CAACe,QAJV;AAKLC,IAAAA,YAAY,EAAEhB,IAAI,CAACgB,YAAL,EALT;AAMLC,IAAAA,KAAK,EAAEjB,IAAI,CAACiB;AANP,GAAP;AAQD;;AAED1B,UAAU,CAAC2B,WAAX,GAAyB,+BAAzB","sourcesContent":["'use strict';\n/**\n * @module JSONStream\n */\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\nvar constants = require('../runner').constants;\nvar EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\nvar EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\nvar EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;\nvar EVENT_RUN_END = constants.EVENT_RUN_END;\n\n/**\n * Expose `JSONStream`.\n */\n\nexports = module.exports = JSONStream;\n\n/**\n * Constructs a new `JSONStream` reporter instance.\n *\n * @public\n * @class\n * @memberof Mocha.reporters\n * @extends Mocha.reporters.Base\n * @param {Runner} runner - Instance triggers reporter actions.\n * @param {Object} [options] - runner options\n */\nfunction JSONStream(runner, options) {\n  Base.call(this, runner, options);\n\n  var self = this;\n  var total = runner.total;\n\n  runner.once(EVENT_RUN_BEGIN, function () {\n    writeEvent(['start', {total: total}]);\n  });\n\n  runner.on(EVENT_TEST_PASS, function (test) {\n    writeEvent(['pass', clean(test)]);\n  });\n\n  runner.on(EVENT_TEST_FAIL, function (test, err) {\n    test = clean(test);\n    test.err = err.message;\n    test.stack = err.stack || null;\n    writeEvent(['fail', test]);\n  });\n\n  runner.once(EVENT_RUN_END, function () {\n    writeEvent(['end', self.stats]);\n  });\n}\n\n/**\n * Mocha event to be written to the output stream.\n * @typedef {Array} JSONStream~MochaEvent\n */\n\n/**\n * Writes Mocha event to reporter output stream.\n *\n * @private\n * @param {JSONStream~MochaEvent} event - Mocha event to be output.\n */\nfunction writeEvent(event) {\n  process.stdout.write(JSON.stringify(event) + '\\n');\n}\n\n/**\n * Returns an object literal representation of `test`\n * free of cyclic properties, etc.\n *\n * @private\n * @param {Test} test - Instance used as data source.\n * @return {Object} object containing pared-down test instance data\n */\nfunction clean(test) {\n  return {\n    title: test.title,\n    fullTitle: test.fullTitle(),\n    file: test.file,\n    duration: test.duration,\n    currentRetry: test.currentRetry(),\n    speed: test.speed\n  };\n}\n\nJSONStream.description = 'newline delimited JSON events';\n"]},"metadata":{},"sourceType":"script"}
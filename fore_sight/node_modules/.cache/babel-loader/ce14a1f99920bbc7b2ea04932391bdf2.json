{"ast":null,"code":"'use strict';\n\nvar Runnable = require('./runnable');\n\nconst {\n  inherits,\n  constants\n} = require('./utils');\n\nconst {\n  MOCHA_ID_PROP_NAME\n} = constants;\n/**\n * Expose `Hook`.\n */\n\nmodule.exports = Hook;\n/**\n * Initialize a new `Hook` with the given `title` and callback `fn`\n *\n * @class\n * @extends Runnable\n * @param {String} title\n * @param {Function} fn\n */\n\nfunction Hook(title, fn) {\n  Runnable.call(this, title, fn);\n  this.type = 'hook';\n}\n/**\n * Inherit from `Runnable.prototype`.\n */\n\n\ninherits(Hook, Runnable);\n/**\n * Resets the state for a next run.\n */\n\nHook.prototype.reset = function () {\n  Runnable.prototype.reset.call(this);\n  delete this._error;\n};\n/**\n * Get or set the test `err`.\n *\n * @memberof Hook\n * @public\n * @param {Error} err\n * @return {Error}\n */\n\n\nHook.prototype.error = function (err) {\n  if (!arguments.length) {\n    err = this._error;\n    this._error = null;\n    return err;\n  }\n\n  this._error = err;\n};\n/**\n * Returns an object suitable for IPC.\n * Functions are represented by keys beginning with `$$`.\n * @private\n * @returns {Object}\n */\n\n\nHook.prototype.serialize = function serialize() {\n  return {\n    $$currentRetry: this.currentRetry(),\n    $$fullTitle: this.fullTitle(),\n    $$isPending: Boolean(this.isPending()),\n    $$titlePath: this.titlePath(),\n    ctx: this.ctx && this.ctx.currentTest ? {\n      currentTest: {\n        title: this.ctx.currentTest.title,\n        [MOCHA_ID_PROP_NAME]: this.ctx.currentTest.id\n      }\n    } : {},\n    duration: this.duration,\n    file: this.file,\n    parent: {\n      $$fullTitle: this.parent.fullTitle(),\n      [MOCHA_ID_PROP_NAME]: this.parent.id\n    },\n    state: this.state,\n    title: this.title,\n    type: this.type,\n    [MOCHA_ID_PROP_NAME]: this.id\n  };\n};","map":{"version":3,"sources":["C:/Users/91805/node_modules/mocha/lib/hook.js"],"names":["Runnable","require","inherits","constants","MOCHA_ID_PROP_NAME","module","exports","Hook","title","fn","call","type","prototype","reset","_error","error","err","arguments","length","serialize","$$currentRetry","currentRetry","$$fullTitle","fullTitle","$$isPending","Boolean","isPending","$$titlePath","titlePath","ctx","currentTest","id","duration","file","parent","state"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AACA,MAAM;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,IAAwBF,OAAO,CAAC,SAAD,CAArC;;AACA,MAAM;AAACG,EAAAA;AAAD,IAAuBD,SAA7B;AAEA;AACA;AACA;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,IAAT,CAAcC,KAAd,EAAqBC,EAArB,EAAyB;AACvBT,EAAAA,QAAQ,CAACU,IAAT,CAAc,IAAd,EAAoBF,KAApB,EAA2BC,EAA3B;AACA,OAAKE,IAAL,GAAY,MAAZ;AACD;AAED;AACA;AACA;;;AACAT,QAAQ,CAACK,IAAD,EAAOP,QAAP,CAAR;AAEA;AACA;AACA;;AACAO,IAAI,CAACK,SAAL,CAAeC,KAAf,GAAuB,YAAY;AACjCb,EAAAA,QAAQ,CAACY,SAAT,CAAmBC,KAAnB,CAAyBH,IAAzB,CAA8B,IAA9B;AACA,SAAO,KAAKI,MAAZ;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAP,IAAI,CAACK,SAAL,CAAeG,KAAf,GAAuB,UAAUC,GAAV,EAAe;AACpC,MAAI,CAACC,SAAS,CAACC,MAAf,EAAuB;AACrBF,IAAAA,GAAG,GAAG,KAAKF,MAAX;AACA,SAAKA,MAAL,GAAc,IAAd;AACA,WAAOE,GAAP;AACD;;AAED,OAAKF,MAAL,GAAcE,GAAd;AACD,CARD;AAUA;AACA;AACA;AACA;AACA;AACA;;;AACAT,IAAI,CAACK,SAAL,CAAeO,SAAf,GAA2B,SAASA,SAAT,GAAqB;AAC9C,SAAO;AACLC,IAAAA,cAAc,EAAE,KAAKC,YAAL,EADX;AAELC,IAAAA,WAAW,EAAE,KAAKC,SAAL,EAFR;AAGLC,IAAAA,WAAW,EAAEC,OAAO,CAAC,KAAKC,SAAL,EAAD,CAHf;AAILC,IAAAA,WAAW,EAAE,KAAKC,SAAL,EAJR;AAKLC,IAAAA,GAAG,EACD,KAAKA,GAAL,IAAY,KAAKA,GAAL,CAASC,WAArB,GACI;AACEA,MAAAA,WAAW,EAAE;AACXtB,QAAAA,KAAK,EAAE,KAAKqB,GAAL,CAASC,WAAT,CAAqBtB,KADjB;AAEX,SAACJ,kBAAD,GAAsB,KAAKyB,GAAL,CAASC,WAAT,CAAqBC;AAFhC;AADf,KADJ,GAOI,EAbD;AAcLC,IAAAA,QAAQ,EAAE,KAAKA,QAdV;AAeLC,IAAAA,IAAI,EAAE,KAAKA,IAfN;AAgBLC,IAAAA,MAAM,EAAE;AACNZ,MAAAA,WAAW,EAAE,KAAKY,MAAL,CAAYX,SAAZ,EADP;AAEN,OAACnB,kBAAD,GAAsB,KAAK8B,MAAL,CAAYH;AAF5B,KAhBH;AAoBLI,IAAAA,KAAK,EAAE,KAAKA,KApBP;AAqBL3B,IAAAA,KAAK,EAAE,KAAKA,KArBP;AAsBLG,IAAAA,IAAI,EAAE,KAAKA,IAtBN;AAuBL,KAACP,kBAAD,GAAsB,KAAK2B;AAvBtB,GAAP;AAyBD,CA1BD","sourcesContent":["'use strict';\n\nvar Runnable = require('./runnable');\nconst {inherits, constants} = require('./utils');\nconst {MOCHA_ID_PROP_NAME} = constants;\n\n/**\n * Expose `Hook`.\n */\n\nmodule.exports = Hook;\n\n/**\n * Initialize a new `Hook` with the given `title` and callback `fn`\n *\n * @class\n * @extends Runnable\n * @param {String} title\n * @param {Function} fn\n */\nfunction Hook(title, fn) {\n  Runnable.call(this, title, fn);\n  this.type = 'hook';\n}\n\n/**\n * Inherit from `Runnable.prototype`.\n */\ninherits(Hook, Runnable);\n\n/**\n * Resets the state for a next run.\n */\nHook.prototype.reset = function () {\n  Runnable.prototype.reset.call(this);\n  delete this._error;\n};\n\n/**\n * Get or set the test `err`.\n *\n * @memberof Hook\n * @public\n * @param {Error} err\n * @return {Error}\n */\nHook.prototype.error = function (err) {\n  if (!arguments.length) {\n    err = this._error;\n    this._error = null;\n    return err;\n  }\n\n  this._error = err;\n};\n\n/**\n * Returns an object suitable for IPC.\n * Functions are represented by keys beginning with `$$`.\n * @private\n * @returns {Object}\n */\nHook.prototype.serialize = function serialize() {\n  return {\n    $$currentRetry: this.currentRetry(),\n    $$fullTitle: this.fullTitle(),\n    $$isPending: Boolean(this.isPending()),\n    $$titlePath: this.titlePath(),\n    ctx:\n      this.ctx && this.ctx.currentTest\n        ? {\n            currentTest: {\n              title: this.ctx.currentTest.title,\n              [MOCHA_ID_PROP_NAME]: this.ctx.currentTest.id\n            }\n          }\n        : {},\n    duration: this.duration,\n    file: this.file,\n    parent: {\n      $$fullTitle: this.parent.fullTitle(),\n      [MOCHA_ID_PROP_NAME]: this.parent.id\n    },\n    state: this.state,\n    title: this.title,\n    type: this.type,\n    [MOCHA_ID_PROP_NAME]: this.id\n  };\n};\n"]},"metadata":{},"sourceType":"script"}
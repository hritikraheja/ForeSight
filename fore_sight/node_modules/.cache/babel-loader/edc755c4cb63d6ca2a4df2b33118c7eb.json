{"ast":null,"code":"'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst Hook = require('./hook');\n\nvar {\n  assignNewMochaID,\n  clamp,\n  constants: utilsConstants,\n  defineConstants,\n  getMochaID,\n  inherits,\n  isString\n} = require('./utils');\n\nconst debug = require('debug')('mocha:suite');\n\nconst milliseconds = require('ms');\n\nconst errors = require('./errors');\n\nconst {\n  MOCHA_ID_PROP_NAME\n} = utilsConstants;\n/**\n * Expose `Suite`.\n */\n\nexports = module.exports = Suite;\n/**\n * Create a new `Suite` with the given `title` and parent `Suite`.\n *\n * @public\n * @param {Suite} parent - Parent suite (required!)\n * @param {string} title - Title\n * @return {Suite}\n */\n\nSuite.create = function (parent, title) {\n  var suite = new Suite(title, parent.ctx);\n  suite.parent = parent;\n  title = suite.fullTitle();\n  parent.addSuite(suite);\n  return suite;\n};\n/**\n * Constructs a new `Suite` instance with the given `title`, `ctx`, and `isRoot`.\n *\n * @public\n * @class\n * @extends EventEmitter\n * @see {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}\n * @param {string} title - Suite title.\n * @param {Context} parentContext - Parent context instance.\n * @param {boolean} [isRoot=false] - Whether this is the root suite.\n */\n\n\nfunction Suite(title, parentContext, isRoot) {\n  if (!isString(title)) {\n    throw errors.createInvalidArgumentTypeError('Suite argument \"title\" must be a string. Received type \"' + typeof title + '\"', 'title', 'string');\n  }\n\n  this.title = title;\n\n  function Context() {}\n\n  Context.prototype = parentContext;\n  this.ctx = new Context();\n  this.suites = [];\n  this.tests = [];\n  this.root = isRoot === true;\n  this.pending = false;\n  this._retries = -1;\n  this._beforeEach = [];\n  this._beforeAll = [];\n  this._afterEach = [];\n  this._afterAll = [];\n  this._timeout = 2000;\n  this._slow = 75;\n  this._bail = false;\n  this._onlyTests = [];\n  this._onlySuites = [];\n  assignNewMochaID(this);\n  Object.defineProperty(this, 'id', {\n    get() {\n      return getMochaID(this);\n    }\n\n  });\n  this.reset();\n}\n/**\n * Inherit from `EventEmitter.prototype`.\n */\n\n\ninherits(Suite, EventEmitter);\n/**\n * Resets the state initially or for a next run.\n */\n\nSuite.prototype.reset = function () {\n  this.delayed = false;\n\n  function doReset(thingToReset) {\n    thingToReset.reset();\n  }\n\n  this.suites.forEach(doReset);\n  this.tests.forEach(doReset);\n\n  this._beforeEach.forEach(doReset);\n\n  this._afterEach.forEach(doReset);\n\n  this._beforeAll.forEach(doReset);\n\n  this._afterAll.forEach(doReset);\n};\n/**\n * Return a clone of this `Suite`.\n *\n * @private\n * @return {Suite}\n */\n\n\nSuite.prototype.clone = function () {\n  var suite = new Suite(this.title);\n  debug('clone');\n  suite.ctx = this.ctx;\n  suite.root = this.root;\n  suite.timeout(this.timeout());\n  suite.retries(this.retries());\n  suite.slow(this.slow());\n  suite.bail(this.bail());\n  return suite;\n};\n/**\n * Set or get timeout `ms` or short-hand such as \"2s\".\n *\n * @private\n * @todo Do not attempt to set value if `ms` is undefined\n * @param {number|string} ms\n * @return {Suite|number} for chaining\n */\n\n\nSuite.prototype.timeout = function (ms) {\n  if (!arguments.length) {\n    return this._timeout;\n  }\n\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  } // Clamp to range\n\n\n  var INT_MAX = Math.pow(2, 31) - 1;\n  var range = [0, INT_MAX];\n  ms = clamp(ms, range);\n  debug('timeout %d', ms);\n  this._timeout = parseInt(ms, 10);\n  return this;\n};\n/**\n * Set or get number of times to retry a failed test.\n *\n * @private\n * @param {number|string} n\n * @return {Suite|number} for chaining\n */\n\n\nSuite.prototype.retries = function (n) {\n  if (!arguments.length) {\n    return this._retries;\n  }\n\n  debug('retries %d', n);\n  this._retries = parseInt(n, 10) || 0;\n  return this;\n};\n/**\n * Set or get slow `ms` or short-hand such as \"2s\".\n *\n * @private\n * @param {number|string} ms\n * @return {Suite|number} for chaining\n */\n\n\nSuite.prototype.slow = function (ms) {\n  if (!arguments.length) {\n    return this._slow;\n  }\n\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n\n  debug('slow %d', ms);\n  this._slow = ms;\n  return this;\n};\n/**\n * Set or get whether to bail after first error.\n *\n * @private\n * @param {boolean} bail\n * @return {Suite|number} for chaining\n */\n\n\nSuite.prototype.bail = function (bail) {\n  if (!arguments.length) {\n    return this._bail;\n  }\n\n  debug('bail %s', bail);\n  this._bail = bail;\n  return this;\n};\n/**\n * Check if this suite or its parent suite is marked as pending.\n *\n * @private\n */\n\n\nSuite.prototype.isPending = function () {\n  return this.pending || this.parent && this.parent.isPending();\n};\n/**\n * Generic hook-creator.\n * @private\n * @param {string} title - Title of hook\n * @param {Function} fn - Hook callback\n * @returns {Hook} A new hook\n */\n\n\nSuite.prototype._createHook = function (title, fn) {\n  var hook = new Hook(title, fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.retries(this.retries());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  hook.file = this.file;\n  return hook;\n};\n/**\n * Run `fn(test[, done])` before running tests.\n *\n * @private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\n\n\nSuite.prototype.beforeAll = function (title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n\n  title = '\"before all\" hook' + (title ? ': ' + title : '');\n\n  var hook = this._createHook(title, fn);\n\n  this._beforeAll.push(hook);\n\n  this.emit(constants.EVENT_SUITE_ADD_HOOK_BEFORE_ALL, hook);\n  return this;\n};\n/**\n * Run `fn(test[, done])` after running tests.\n *\n * @private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\n\n\nSuite.prototype.afterAll = function (title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n\n  title = '\"after all\" hook' + (title ? ': ' + title : '');\n\n  var hook = this._createHook(title, fn);\n\n  this._afterAll.push(hook);\n\n  this.emit(constants.EVENT_SUITE_ADD_HOOK_AFTER_ALL, hook);\n  return this;\n};\n/**\n * Run `fn(test[, done])` before each test case.\n *\n * @private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\n\n\nSuite.prototype.beforeEach = function (title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n\n  title = '\"before each\" hook' + (title ? ': ' + title : '');\n\n  var hook = this._createHook(title, fn);\n\n  this._beforeEach.push(hook);\n\n  this.emit(constants.EVENT_SUITE_ADD_HOOK_BEFORE_EACH, hook);\n  return this;\n};\n/**\n * Run `fn(test[, done])` after each test case.\n *\n * @private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\n\n\nSuite.prototype.afterEach = function (title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n\n  title = '\"after each\" hook' + (title ? ': ' + title : '');\n\n  var hook = this._createHook(title, fn);\n\n  this._afterEach.push(hook);\n\n  this.emit(constants.EVENT_SUITE_ADD_HOOK_AFTER_EACH, hook);\n  return this;\n};\n/**\n * Add a test `suite`.\n *\n * @private\n * @param {Suite} suite\n * @return {Suite} for chaining\n */\n\n\nSuite.prototype.addSuite = function (suite) {\n  suite.parent = this;\n  suite.root = false;\n  suite.timeout(this.timeout());\n  suite.retries(this.retries());\n  suite.slow(this.slow());\n  suite.bail(this.bail());\n  this.suites.push(suite);\n  this.emit(constants.EVENT_SUITE_ADD_SUITE, suite);\n  return this;\n};\n/**\n * Add a `test` to this suite.\n *\n * @private\n * @param {Test} test\n * @return {Suite} for chaining\n */\n\n\nSuite.prototype.addTest = function (test) {\n  test.parent = this;\n  test.timeout(this.timeout());\n  test.retries(this.retries());\n  test.slow(this.slow());\n  test.ctx = this.ctx;\n  this.tests.push(test);\n  this.emit(constants.EVENT_SUITE_ADD_TEST, test);\n  return this;\n};\n/**\n * Return the full title generated by recursively concatenating the parent's\n * full title.\n *\n * @memberof Suite\n * @public\n * @return {string}\n */\n\n\nSuite.prototype.fullTitle = function () {\n  return this.titlePath().join(' ');\n};\n/**\n * Return the title path generated by recursively concatenating the parent's\n * title path.\n *\n * @memberof Suite\n * @public\n * @return {string}\n */\n\n\nSuite.prototype.titlePath = function () {\n  var result = [];\n\n  if (this.parent) {\n    result = result.concat(this.parent.titlePath());\n  }\n\n  if (!this.root) {\n    result.push(this.title);\n  }\n\n  return result;\n};\n/**\n * Return the total number of tests.\n *\n * @memberof Suite\n * @public\n * @return {number}\n */\n\n\nSuite.prototype.total = function () {\n  return this.suites.reduce(function (sum, suite) {\n    return sum + suite.total();\n  }, 0) + this.tests.length;\n};\n/**\n * Iterates through each suite recursively to find all tests. Applies a\n * function in the format `fn(test)`.\n *\n * @private\n * @param {Function} fn\n * @return {Suite}\n */\n\n\nSuite.prototype.eachTest = function (fn) {\n  this.tests.forEach(fn);\n  this.suites.forEach(function (suite) {\n    suite.eachTest(fn);\n  });\n  return this;\n};\n/**\n * This will run the root suite if we happen to be running in delayed mode.\n * @private\n */\n\n\nSuite.prototype.run = function run() {\n  if (this.root) {\n    this.emit(constants.EVENT_ROOT_SUITE_RUN);\n  }\n};\n/**\n * Determines whether a suite has an `only` test or suite as a descendant.\n *\n * @private\n * @returns {Boolean}\n */\n\n\nSuite.prototype.hasOnly = function hasOnly() {\n  return this._onlyTests.length > 0 || this._onlySuites.length > 0 || this.suites.some(function (suite) {\n    return suite.hasOnly();\n  });\n};\n/**\n * Filter suites based on `isOnly` logic.\n *\n * @private\n * @returns {Boolean}\n */\n\n\nSuite.prototype.filterOnly = function filterOnly() {\n  if (this._onlyTests.length) {\n    // If the suite contains `only` tests, run those and ignore any nested suites.\n    this.tests = this._onlyTests;\n    this.suites = [];\n  } else {\n    // Otherwise, do not run any of the tests in this suite.\n    this.tests = [];\n\n    this._onlySuites.forEach(function (onlySuite) {\n      // If there are other `only` tests/suites nested in the current `only` suite, then filter that `only` suite.\n      // Otherwise, all of the tests on this `only` suite should be run, so don't filter it.\n      if (onlySuite.hasOnly()) {\n        onlySuite.filterOnly();\n      }\n    }); // Run the `only` suites, as well as any other suites that have `only` tests/suites as descendants.\n\n\n    var onlySuites = this._onlySuites;\n    this.suites = this.suites.filter(function (childSuite) {\n      return onlySuites.indexOf(childSuite) !== -1 || childSuite.filterOnly();\n    });\n  } // Keep the suite only if there is something to run\n\n\n  return this.tests.length > 0 || this.suites.length > 0;\n};\n/**\n * Adds a suite to the list of subsuites marked `only`.\n *\n * @private\n * @param {Suite} suite\n */\n\n\nSuite.prototype.appendOnlySuite = function (suite) {\n  this._onlySuites.push(suite);\n};\n/**\n * Marks a suite to be `only`.\n *\n * @private\n */\n\n\nSuite.prototype.markOnly = function () {\n  this.parent && this.parent.appendOnlySuite(this);\n};\n/**\n * Adds a test to the list of tests marked `only`.\n *\n * @private\n * @param {Test} test\n */\n\n\nSuite.prototype.appendOnlyTest = function (test) {\n  this._onlyTests.push(test);\n};\n/**\n * Returns the array of hooks by hook name; see `HOOK_TYPE_*` constants.\n * @private\n */\n\n\nSuite.prototype.getHooks = function getHooks(name) {\n  return this['_' + name];\n};\n/**\n * cleans all references from this suite and all child suites.\n */\n\n\nSuite.prototype.dispose = function () {\n  this.suites.forEach(function (suite) {\n    suite.dispose();\n  });\n  this.cleanReferences();\n};\n/**\n * Cleans up the references to all the deferred functions\n * (before/after/beforeEach/afterEach) and tests of a Suite.\n * These must be deleted otherwise a memory leak can happen,\n * as those functions may reference variables from closures,\n * thus those variables can never be garbage collected as long\n * as the deferred functions exist.\n *\n * @private\n */\n\n\nSuite.prototype.cleanReferences = function cleanReferences() {\n  function cleanArrReferences(arr) {\n    for (var i = 0; i < arr.length; i++) {\n      delete arr[i].fn;\n    }\n  }\n\n  if (Array.isArray(this._beforeAll)) {\n    cleanArrReferences(this._beforeAll);\n  }\n\n  if (Array.isArray(this._beforeEach)) {\n    cleanArrReferences(this._beforeEach);\n  }\n\n  if (Array.isArray(this._afterAll)) {\n    cleanArrReferences(this._afterAll);\n  }\n\n  if (Array.isArray(this._afterEach)) {\n    cleanArrReferences(this._afterEach);\n  }\n\n  for (var i = 0; i < this.tests.length; i++) {\n    delete this.tests[i].fn;\n  }\n};\n/**\n * Returns an object suitable for IPC.\n * Functions are represented by keys beginning with `$$`.\n * @private\n * @returns {Object}\n */\n\n\nSuite.prototype.serialize = function serialize() {\n  return {\n    _bail: this._bail,\n    $$fullTitle: this.fullTitle(),\n    $$isPending: Boolean(this.isPending()),\n    root: this.root,\n    title: this.title,\n    [MOCHA_ID_PROP_NAME]: this.id,\n    parent: this.parent ? {\n      [MOCHA_ID_PROP_NAME]: this.parent.id\n    } : null\n  };\n};\n\nvar constants = defineConstants(\n/**\n * {@link Suite}-related constants.\n * @public\n * @memberof Suite\n * @alias constants\n * @readonly\n * @static\n * @enum {string}\n */\n{\n  /**\n   * Event emitted after a test file has been loaded. Not emitted in browser.\n   */\n  EVENT_FILE_POST_REQUIRE: 'post-require',\n\n  /**\n   * Event emitted before a test file has been loaded. In browser, this is emitted once an interface has been selected.\n   */\n  EVENT_FILE_PRE_REQUIRE: 'pre-require',\n\n  /**\n   * Event emitted immediately after a test file has been loaded. Not emitted in browser.\n   */\n  EVENT_FILE_REQUIRE: 'require',\n\n  /**\n   * Event emitted when `global.run()` is called (use with `delay` option).\n   */\n  EVENT_ROOT_SUITE_RUN: 'run',\n\n  /**\n   * Namespace for collection of a `Suite`'s \"after all\" hooks.\n   */\n  HOOK_TYPE_AFTER_ALL: 'afterAll',\n\n  /**\n   * Namespace for collection of a `Suite`'s \"after each\" hooks.\n   */\n  HOOK_TYPE_AFTER_EACH: 'afterEach',\n\n  /**\n   * Namespace for collection of a `Suite`'s \"before all\" hooks.\n   */\n  HOOK_TYPE_BEFORE_ALL: 'beforeAll',\n\n  /**\n   * Namespace for collection of a `Suite`'s \"before each\" hooks.\n   */\n  HOOK_TYPE_BEFORE_EACH: 'beforeEach',\n\n  /**\n   * Emitted after a child `Suite` has been added to a `Suite`.\n   */\n  EVENT_SUITE_ADD_SUITE: 'suite',\n\n  /**\n   * Emitted after an \"after all\" `Hook` has been added to a `Suite`.\n   */\n  EVENT_SUITE_ADD_HOOK_AFTER_ALL: 'afterAll',\n\n  /**\n   * Emitted after an \"after each\" `Hook` has been added to a `Suite`.\n   */\n  EVENT_SUITE_ADD_HOOK_AFTER_EACH: 'afterEach',\n\n  /**\n   * Emitted after an \"before all\" `Hook` has been added to a `Suite`.\n   */\n  EVENT_SUITE_ADD_HOOK_BEFORE_ALL: 'beforeAll',\n\n  /**\n   * Emitted after an \"before each\" `Hook` has been added to a `Suite`.\n   */\n  EVENT_SUITE_ADD_HOOK_BEFORE_EACH: 'beforeEach',\n\n  /**\n   * Emitted after a `Test` has been added to a `Suite`.\n   */\n  EVENT_SUITE_ADD_TEST: 'test'\n});\nSuite.constants = constants;","map":{"version":3,"sources":["C:/Users/91805/node_modules/mocha/lib/suite.js"],"names":["EventEmitter","require","Hook","assignNewMochaID","clamp","constants","utilsConstants","defineConstants","getMochaID","inherits","isString","debug","milliseconds","errors","MOCHA_ID_PROP_NAME","exports","module","Suite","create","parent","title","suite","ctx","fullTitle","addSuite","parentContext","isRoot","createInvalidArgumentTypeError","Context","prototype","suites","tests","root","pending","_retries","_beforeEach","_beforeAll","_afterEach","_afterAll","_timeout","_slow","_bail","_onlyTests","_onlySuites","Object","defineProperty","get","reset","delayed","doReset","thingToReset","forEach","clone","timeout","retries","slow","bail","ms","arguments","length","INT_MAX","Math","pow","range","parseInt","n","isPending","_createHook","fn","hook","file","beforeAll","name","push","emit","EVENT_SUITE_ADD_HOOK_BEFORE_ALL","afterAll","EVENT_SUITE_ADD_HOOK_AFTER_ALL","beforeEach","EVENT_SUITE_ADD_HOOK_BEFORE_EACH","afterEach","EVENT_SUITE_ADD_HOOK_AFTER_EACH","EVENT_SUITE_ADD_SUITE","addTest","test","EVENT_SUITE_ADD_TEST","titlePath","join","result","concat","total","reduce","sum","eachTest","run","EVENT_ROOT_SUITE_RUN","hasOnly","some","filterOnly","onlySuite","onlySuites","filter","childSuite","indexOf","appendOnlySuite","markOnly","appendOnlyTest","getHooks","dispose","cleanReferences","cleanArrReferences","arr","i","Array","isArray","serialize","$$fullTitle","$$isPending","Boolean","id","EVENT_FILE_POST_REQUIRE","EVENT_FILE_PRE_REQUIRE","EVENT_FILE_REQUIRE","HOOK_TYPE_AFTER_ALL","HOOK_TYPE_AFTER_EACH","HOOK_TYPE_BEFORE_ALL","HOOK_TYPE_BEFORE_EACH"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\nconst {EventEmitter} = require('events');\nconst Hook = require('./hook');\nvar {\n  assignNewMochaID,\n  clamp,\n  constants: utilsConstants,\n  defineConstants,\n  getMochaID,\n  inherits,\n  isString\n} = require('./utils');\nconst debug = require('debug')('mocha:suite');\nconst milliseconds = require('ms');\nconst errors = require('./errors');\n\nconst {MOCHA_ID_PROP_NAME} = utilsConstants;\n\n/**\n * Expose `Suite`.\n */\n\nexports = module.exports = Suite;\n\n/**\n * Create a new `Suite` with the given `title` and parent `Suite`.\n *\n * @public\n * @param {Suite} parent - Parent suite (required!)\n * @param {string} title - Title\n * @return {Suite}\n */\nSuite.create = function (parent, title) {\n  var suite = new Suite(title, parent.ctx);\n  suite.parent = parent;\n  title = suite.fullTitle();\n  parent.addSuite(suite);\n  return suite;\n};\n\n/**\n * Constructs a new `Suite` instance with the given `title`, `ctx`, and `isRoot`.\n *\n * @public\n * @class\n * @extends EventEmitter\n * @see {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}\n * @param {string} title - Suite title.\n * @param {Context} parentContext - Parent context instance.\n * @param {boolean} [isRoot=false] - Whether this is the root suite.\n */\nfunction Suite(title, parentContext, isRoot) {\n  if (!isString(title)) {\n    throw errors.createInvalidArgumentTypeError(\n      'Suite argument \"title\" must be a string. Received type \"' +\n        typeof title +\n        '\"',\n      'title',\n      'string'\n    );\n  }\n  this.title = title;\n  function Context() {}\n  Context.prototype = parentContext;\n  this.ctx = new Context();\n  this.suites = [];\n  this.tests = [];\n  this.root = isRoot === true;\n  this.pending = false;\n  this._retries = -1;\n  this._beforeEach = [];\n  this._beforeAll = [];\n  this._afterEach = [];\n  this._afterAll = [];\n  this._timeout = 2000;\n  this._slow = 75;\n  this._bail = false;\n  this._onlyTests = [];\n  this._onlySuites = [];\n  assignNewMochaID(this);\n\n  Object.defineProperty(this, 'id', {\n    get() {\n      return getMochaID(this);\n    }\n  });\n\n  this.reset();\n}\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\ninherits(Suite, EventEmitter);\n\n/**\n * Resets the state initially or for a next run.\n */\nSuite.prototype.reset = function () {\n  this.delayed = false;\n  function doReset(thingToReset) {\n    thingToReset.reset();\n  }\n  this.suites.forEach(doReset);\n  this.tests.forEach(doReset);\n  this._beforeEach.forEach(doReset);\n  this._afterEach.forEach(doReset);\n  this._beforeAll.forEach(doReset);\n  this._afterAll.forEach(doReset);\n};\n\n/**\n * Return a clone of this `Suite`.\n *\n * @private\n * @return {Suite}\n */\nSuite.prototype.clone = function () {\n  var suite = new Suite(this.title);\n  debug('clone');\n  suite.ctx = this.ctx;\n  suite.root = this.root;\n  suite.timeout(this.timeout());\n  suite.retries(this.retries());\n  suite.slow(this.slow());\n  suite.bail(this.bail());\n  return suite;\n};\n\n/**\n * Set or get timeout `ms` or short-hand such as \"2s\".\n *\n * @private\n * @todo Do not attempt to set value if `ms` is undefined\n * @param {number|string} ms\n * @return {Suite|number} for chaining\n */\nSuite.prototype.timeout = function (ms) {\n  if (!arguments.length) {\n    return this._timeout;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n\n  // Clamp to range\n  var INT_MAX = Math.pow(2, 31) - 1;\n  var range = [0, INT_MAX];\n  ms = clamp(ms, range);\n\n  debug('timeout %d', ms);\n  this._timeout = parseInt(ms, 10);\n  return this;\n};\n\n/**\n * Set or get number of times to retry a failed test.\n *\n * @private\n * @param {number|string} n\n * @return {Suite|number} for chaining\n */\nSuite.prototype.retries = function (n) {\n  if (!arguments.length) {\n    return this._retries;\n  }\n  debug('retries %d', n);\n  this._retries = parseInt(n, 10) || 0;\n  return this;\n};\n\n/**\n * Set or get slow `ms` or short-hand such as \"2s\".\n *\n * @private\n * @param {number|string} ms\n * @return {Suite|number} for chaining\n */\nSuite.prototype.slow = function (ms) {\n  if (!arguments.length) {\n    return this._slow;\n  }\n  if (typeof ms === 'string') {\n    ms = milliseconds(ms);\n  }\n  debug('slow %d', ms);\n  this._slow = ms;\n  return this;\n};\n\n/**\n * Set or get whether to bail after first error.\n *\n * @private\n * @param {boolean} bail\n * @return {Suite|number} for chaining\n */\nSuite.prototype.bail = function (bail) {\n  if (!arguments.length) {\n    return this._bail;\n  }\n  debug('bail %s', bail);\n  this._bail = bail;\n  return this;\n};\n\n/**\n * Check if this suite or its parent suite is marked as pending.\n *\n * @private\n */\nSuite.prototype.isPending = function () {\n  return this.pending || (this.parent && this.parent.isPending());\n};\n\n/**\n * Generic hook-creator.\n * @private\n * @param {string} title - Title of hook\n * @param {Function} fn - Hook callback\n * @returns {Hook} A new hook\n */\nSuite.prototype._createHook = function (title, fn) {\n  var hook = new Hook(title, fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.retries(this.retries());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  hook.file = this.file;\n  return hook;\n};\n\n/**\n * Run `fn(test[, done])` before running tests.\n *\n * @private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.beforeAll = function (title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"before all\" hook' + (title ? ': ' + title : '');\n\n  var hook = this._createHook(title, fn);\n  this._beforeAll.push(hook);\n  this.emit(constants.EVENT_SUITE_ADD_HOOK_BEFORE_ALL, hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` after running tests.\n *\n * @private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.afterAll = function (title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"after all\" hook' + (title ? ': ' + title : '');\n\n  var hook = this._createHook(title, fn);\n  this._afterAll.push(hook);\n  this.emit(constants.EVENT_SUITE_ADD_HOOK_AFTER_ALL, hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` before each test case.\n *\n * @private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.beforeEach = function (title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"before each\" hook' + (title ? ': ' + title : '');\n\n  var hook = this._createHook(title, fn);\n  this._beforeEach.push(hook);\n  this.emit(constants.EVENT_SUITE_ADD_HOOK_BEFORE_EACH, hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` after each test case.\n *\n * @private\n * @param {string} title\n * @param {Function} fn\n * @return {Suite} for chaining\n */\nSuite.prototype.afterEach = function (title, fn) {\n  if (this.isPending()) {\n    return this;\n  }\n  if (typeof title === 'function') {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"after each\" hook' + (title ? ': ' + title : '');\n\n  var hook = this._createHook(title, fn);\n  this._afterEach.push(hook);\n  this.emit(constants.EVENT_SUITE_ADD_HOOK_AFTER_EACH, hook);\n  return this;\n};\n\n/**\n * Add a test `suite`.\n *\n * @private\n * @param {Suite} suite\n * @return {Suite} for chaining\n */\nSuite.prototype.addSuite = function (suite) {\n  suite.parent = this;\n  suite.root = false;\n  suite.timeout(this.timeout());\n  suite.retries(this.retries());\n  suite.slow(this.slow());\n  suite.bail(this.bail());\n  this.suites.push(suite);\n  this.emit(constants.EVENT_SUITE_ADD_SUITE, suite);\n  return this;\n};\n\n/**\n * Add a `test` to this suite.\n *\n * @private\n * @param {Test} test\n * @return {Suite} for chaining\n */\nSuite.prototype.addTest = function (test) {\n  test.parent = this;\n  test.timeout(this.timeout());\n  test.retries(this.retries());\n  test.slow(this.slow());\n  test.ctx = this.ctx;\n  this.tests.push(test);\n  this.emit(constants.EVENT_SUITE_ADD_TEST, test);\n  return this;\n};\n\n/**\n * Return the full title generated by recursively concatenating the parent's\n * full title.\n *\n * @memberof Suite\n * @public\n * @return {string}\n */\nSuite.prototype.fullTitle = function () {\n  return this.titlePath().join(' ');\n};\n\n/**\n * Return the title path generated by recursively concatenating the parent's\n * title path.\n *\n * @memberof Suite\n * @public\n * @return {string}\n */\nSuite.prototype.titlePath = function () {\n  var result = [];\n  if (this.parent) {\n    result = result.concat(this.parent.titlePath());\n  }\n  if (!this.root) {\n    result.push(this.title);\n  }\n  return result;\n};\n\n/**\n * Return the total number of tests.\n *\n * @memberof Suite\n * @public\n * @return {number}\n */\nSuite.prototype.total = function () {\n  return (\n    this.suites.reduce(function (sum, suite) {\n      return sum + suite.total();\n    }, 0) + this.tests.length\n  );\n};\n\n/**\n * Iterates through each suite recursively to find all tests. Applies a\n * function in the format `fn(test)`.\n *\n * @private\n * @param {Function} fn\n * @return {Suite}\n */\nSuite.prototype.eachTest = function (fn) {\n  this.tests.forEach(fn);\n  this.suites.forEach(function (suite) {\n    suite.eachTest(fn);\n  });\n  return this;\n};\n\n/**\n * This will run the root suite if we happen to be running in delayed mode.\n * @private\n */\nSuite.prototype.run = function run() {\n  if (this.root) {\n    this.emit(constants.EVENT_ROOT_SUITE_RUN);\n  }\n};\n\n/**\n * Determines whether a suite has an `only` test or suite as a descendant.\n *\n * @private\n * @returns {Boolean}\n */\nSuite.prototype.hasOnly = function hasOnly() {\n  return (\n    this._onlyTests.length > 0 ||\n    this._onlySuites.length > 0 ||\n    this.suites.some(function (suite) {\n      return suite.hasOnly();\n    })\n  );\n};\n\n/**\n * Filter suites based on `isOnly` logic.\n *\n * @private\n * @returns {Boolean}\n */\nSuite.prototype.filterOnly = function filterOnly() {\n  if (this._onlyTests.length) {\n    // If the suite contains `only` tests, run those and ignore any nested suites.\n    this.tests = this._onlyTests;\n    this.suites = [];\n  } else {\n    // Otherwise, do not run any of the tests in this suite.\n    this.tests = [];\n    this._onlySuites.forEach(function (onlySuite) {\n      // If there are other `only` tests/suites nested in the current `only` suite, then filter that `only` suite.\n      // Otherwise, all of the tests on this `only` suite should be run, so don't filter it.\n      if (onlySuite.hasOnly()) {\n        onlySuite.filterOnly();\n      }\n    });\n    // Run the `only` suites, as well as any other suites that have `only` tests/suites as descendants.\n    var onlySuites = this._onlySuites;\n    this.suites = this.suites.filter(function (childSuite) {\n      return onlySuites.indexOf(childSuite) !== -1 || childSuite.filterOnly();\n    });\n  }\n  // Keep the suite only if there is something to run\n  return this.tests.length > 0 || this.suites.length > 0;\n};\n\n/**\n * Adds a suite to the list of subsuites marked `only`.\n *\n * @private\n * @param {Suite} suite\n */\nSuite.prototype.appendOnlySuite = function (suite) {\n  this._onlySuites.push(suite);\n};\n\n/**\n * Marks a suite to be `only`.\n *\n * @private\n */\nSuite.prototype.markOnly = function () {\n  this.parent && this.parent.appendOnlySuite(this);\n};\n\n/**\n * Adds a test to the list of tests marked `only`.\n *\n * @private\n * @param {Test} test\n */\nSuite.prototype.appendOnlyTest = function (test) {\n  this._onlyTests.push(test);\n};\n\n/**\n * Returns the array of hooks by hook name; see `HOOK_TYPE_*` constants.\n * @private\n */\nSuite.prototype.getHooks = function getHooks(name) {\n  return this['_' + name];\n};\n\n/**\n * cleans all references from this suite and all child suites.\n */\nSuite.prototype.dispose = function () {\n  this.suites.forEach(function (suite) {\n    suite.dispose();\n  });\n  this.cleanReferences();\n};\n\n/**\n * Cleans up the references to all the deferred functions\n * (before/after/beforeEach/afterEach) and tests of a Suite.\n * These must be deleted otherwise a memory leak can happen,\n * as those functions may reference variables from closures,\n * thus those variables can never be garbage collected as long\n * as the deferred functions exist.\n *\n * @private\n */\nSuite.prototype.cleanReferences = function cleanReferences() {\n  function cleanArrReferences(arr) {\n    for (var i = 0; i < arr.length; i++) {\n      delete arr[i].fn;\n    }\n  }\n\n  if (Array.isArray(this._beforeAll)) {\n    cleanArrReferences(this._beforeAll);\n  }\n\n  if (Array.isArray(this._beforeEach)) {\n    cleanArrReferences(this._beforeEach);\n  }\n\n  if (Array.isArray(this._afterAll)) {\n    cleanArrReferences(this._afterAll);\n  }\n\n  if (Array.isArray(this._afterEach)) {\n    cleanArrReferences(this._afterEach);\n  }\n\n  for (var i = 0; i < this.tests.length; i++) {\n    delete this.tests[i].fn;\n  }\n};\n\n/**\n * Returns an object suitable for IPC.\n * Functions are represented by keys beginning with `$$`.\n * @private\n * @returns {Object}\n */\nSuite.prototype.serialize = function serialize() {\n  return {\n    _bail: this._bail,\n    $$fullTitle: this.fullTitle(),\n    $$isPending: Boolean(this.isPending()),\n    root: this.root,\n    title: this.title,\n    [MOCHA_ID_PROP_NAME]: this.id,\n    parent: this.parent ? {[MOCHA_ID_PROP_NAME]: this.parent.id} : null\n  };\n};\n\nvar constants = defineConstants(\n  /**\n   * {@link Suite}-related constants.\n   * @public\n   * @memberof Suite\n   * @alias constants\n   * @readonly\n   * @static\n   * @enum {string}\n   */\n  {\n    /**\n     * Event emitted after a test file has been loaded. Not emitted in browser.\n     */\n    EVENT_FILE_POST_REQUIRE: 'post-require',\n    /**\n     * Event emitted before a test file has been loaded. In browser, this is emitted once an interface has been selected.\n     */\n    EVENT_FILE_PRE_REQUIRE: 'pre-require',\n    /**\n     * Event emitted immediately after a test file has been loaded. Not emitted in browser.\n     */\n    EVENT_FILE_REQUIRE: 'require',\n    /**\n     * Event emitted when `global.run()` is called (use with `delay` option).\n     */\n    EVENT_ROOT_SUITE_RUN: 'run',\n\n    /**\n     * Namespace for collection of a `Suite`'s \"after all\" hooks.\n     */\n    HOOK_TYPE_AFTER_ALL: 'afterAll',\n    /**\n     * Namespace for collection of a `Suite`'s \"after each\" hooks.\n     */\n    HOOK_TYPE_AFTER_EACH: 'afterEach',\n    /**\n     * Namespace for collection of a `Suite`'s \"before all\" hooks.\n     */\n    HOOK_TYPE_BEFORE_ALL: 'beforeAll',\n    /**\n     * Namespace for collection of a `Suite`'s \"before each\" hooks.\n     */\n    HOOK_TYPE_BEFORE_EACH: 'beforeEach',\n\n    /**\n     * Emitted after a child `Suite` has been added to a `Suite`.\n     */\n    EVENT_SUITE_ADD_SUITE: 'suite',\n    /**\n     * Emitted after an \"after all\" `Hook` has been added to a `Suite`.\n     */\n    EVENT_SUITE_ADD_HOOK_AFTER_ALL: 'afterAll',\n    /**\n     * Emitted after an \"after each\" `Hook` has been added to a `Suite`.\n     */\n    EVENT_SUITE_ADD_HOOK_AFTER_EACH: 'afterEach',\n    /**\n     * Emitted after an \"before all\" `Hook` has been added to a `Suite`.\n     */\n    EVENT_SUITE_ADD_HOOK_BEFORE_ALL: 'beforeAll',\n    /**\n     * Emitted after an \"before each\" `Hook` has been added to a `Suite`.\n     */\n    EVENT_SUITE_ADD_HOOK_BEFORE_EACH: 'beforeEach',\n    /**\n     * Emitted after a `Test` has been added to a `Suite`.\n     */\n    EVENT_SUITE_ADD_TEST: 'test'\n  }\n);\n\nSuite.constants = constants;\n"]},"metadata":{},"sourceType":"script"}